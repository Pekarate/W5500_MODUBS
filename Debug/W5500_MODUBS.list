
W5500_MODUBS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800507c  0800507c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800507c  0800507c  0001507c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005084  08005084  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005084  08005084  00015084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005088  08005088  00015088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800508c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200000a0  0800512c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  0800512c  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009024  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db1  00000000  00000000  000290f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002aea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002b818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224ac  00000000  00000000  0002c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aabc  00000000  00000000  0004e554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc95b  00000000  00000000  00059010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012596b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d58  00000000  00000000  001259bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e78 	.word	0x08004e78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08004e78 	.word	0x08004e78

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <Eth_network_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void Eth_network_init(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b092      	sub	sp, #72	; 0x48
 80005b8:	af04      	add	r7, sp, #16
	//printf("wizchip_sw_reset W5500 ");
	//wizchip_sw_reset();
	//delay(1000);
	uint8_t memsize[2][8] = {{16,0,0,0,0,0,0,0},{16,0,0,0,0,0,0,0}};
 80005ba:	4b4e      	ldr	r3, [pc, #312]	; (80006f4 <Eth_network_init+0x140>)
 80005bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80005c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 80005c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ca:	4619      	mov	r1, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	f002 ff45 	bl	800345c <ctlwizchip>
 80005d2:	4603      	mov	r3, r0
 80005d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d8:	d102      	bne.n	80005e0 <Eth_network_init+0x2c>
	{
       printf("WIZCHIP Initialized memmory fail.\r\n");
 80005da:	4847      	ldr	r0, [pc, #284]	; (80006f8 <Eth_network_init+0x144>)
 80005dc:	f003 fdae 	bl	800413c <puts>
	}
	printf("WIZCHIP Initialized memmory done.\r\n");
 80005e0:	4846      	ldr	r0, [pc, #280]	; (80006fc <Eth_network_init+0x148>)
 80005e2:	f003 fdab 	bl	800413c <puts>
    wiz_NetInfo gWIZNETINFO = { .mac = {0x00, 0x08, 0xdc,0x00, 0xab, 0xcd},
 80005e6:	4b46      	ldr	r3, [pc, #280]	; (8000700 <Eth_network_init+0x14c>)
 80005e8:	f107 0410 	add.w	r4, r7, #16
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005f6:	6020      	str	r0, [r4, #0]
 80005f8:	3404      	adds	r4, #4
 80005fa:	8021      	strh	r1, [r4, #0]
 80005fc:	3402      	adds	r4, #2
 80005fe:	0c0b      	lsrs	r3, r1, #16
 8000600:	7023      	strb	r3, [r4, #0]
                            .ip = {192, 168, 1,2},
                            .sn = {255,255,255,0},
                            .gw = {192, 168, 1, 108},
                            .dns = {0,0,0,0},
                            .dhcp = NETINFO_STATIC };
    gWIZNETINFO.ip[3]=123;
 8000602:	237b      	movs	r3, #123	; 0x7b
 8000604:	767b      	strb	r3, [r7, #25]
    printf("gWIZNETINFO.ip[3]:%d\n",gWIZNETINFO.ip[3]);
 8000606:	7e7b      	ldrb	r3, [r7, #25]
 8000608:	4619      	mov	r1, r3
 800060a:	483e      	ldr	r0, [pc, #248]	; (8000704 <Eth_network_init+0x150>)
 800060c:	f003 fd10 	bl	8004030 <iprintf>
    uint8_t tmpstr[6];
	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	2000      	movs	r0, #0
 8000618:	f003 f802 	bl	8003620 <ctlnetwork>

	gWIZNETINFO.ip[3]=0;
 800061c:	2300      	movs	r3, #0
 800061e:	767b      	strb	r3, [r7, #25]
	ctlnetwork(CN_GET_NETINFO, (void*)&gWIZNETINFO);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	2001      	movs	r0, #1
 8000628:	f002 fffa 	bl	8003620 <ctlnetwork>



	wiz_NetTimeout gWIZNETTIME = {.retry_cnt = 6,         //RCR = 3
 800062c:	4b36      	ldr	r3, [pc, #216]	; (8000708 <Eth_network_init+0x154>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	607b      	str	r3, [r7, #4]
                               .time_100us = 3000};     //RTR = 2000
	ctlnetwork(CN_SET_TIMEOUT,(void*)&gWIZNETTIME);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	2004      	movs	r0, #4
 8000638:	f002 fff2 	bl	8003620 <ctlnetwork>

	// Display Network Information
	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	4619      	mov	r1, r3
 8000642:	2008      	movs	r0, #8
 8000644:	f002 ff0a 	bl	800345c <ctlwizchip>
	printf("\r\n=== %s NET CONF ===\r\n",(char*)tmpstr);
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	4619      	mov	r1, r3
 800064e:	482f      	ldr	r0, [pc, #188]	; (800070c <Eth_network_init+0x158>)
 8000650:	f003 fcee 	bl	8004030 <iprintf>
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],
 8000654:	7c3b      	ldrb	r3, [r7, #16]
 8000656:	4618      	mov	r0, r3
 8000658:	7c7b      	ldrb	r3, [r7, #17]
 800065a:	461c      	mov	r4, r3
 800065c:	7cbb      	ldrb	r3, [r7, #18]
 800065e:	461d      	mov	r5, r3
		  gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000660:	7cfb      	ldrb	r3, [r7, #19]
 8000662:	7d3a      	ldrb	r2, [r7, #20]
 8000664:	7d79      	ldrb	r1, [r7, #21]
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],
 8000666:	9102      	str	r1, [sp, #8]
 8000668:	9201      	str	r2, [sp, #4]
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	462b      	mov	r3, r5
 800066e:	4622      	mov	r2, r4
 8000670:	4601      	mov	r1, r0
 8000672:	4827      	ldr	r0, [pc, #156]	; (8000710 <Eth_network_init+0x15c>)
 8000674:	f003 fcdc 	bl	8004030 <iprintf>
	printf("SIP: %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000678:	7dbb      	ldrb	r3, [r7, #22]
 800067a:	4619      	mov	r1, r3
 800067c:	7dfb      	ldrb	r3, [r7, #23]
 800067e:	461a      	mov	r2, r3
 8000680:	7e3b      	ldrb	r3, [r7, #24]
 8000682:	4618      	mov	r0, r3
 8000684:	7e7b      	ldrb	r3, [r7, #25]
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4603      	mov	r3, r0
 800068a:	4822      	ldr	r0, [pc, #136]	; (8000714 <Eth_network_init+0x160>)
 800068c:	f003 fcd0 	bl	8004030 <iprintf>
	printf("GAR: %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000690:	7fbb      	ldrb	r3, [r7, #30]
 8000692:	4619      	mov	r1, r3
 8000694:	7ffb      	ldrb	r3, [r7, #31]
 8000696:	461a      	mov	r2, r3
 8000698:	f897 3020 	ldrb.w	r3, [r7, #32]
 800069c:	4618      	mov	r0, r3
 800069e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	4603      	mov	r3, r0
 80006a6:	481c      	ldr	r0, [pc, #112]	; (8000718 <Eth_network_init+0x164>)
 80006a8:	f003 fcc2 	bl	8004030 <iprintf>
	printf("SUB: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 80006ac:	7ebb      	ldrb	r3, [r7, #26]
 80006ae:	4619      	mov	r1, r3
 80006b0:	7efb      	ldrb	r3, [r7, #27]
 80006b2:	461a      	mov	r2, r3
 80006b4:	7f3b      	ldrb	r3, [r7, #28]
 80006b6:	4618      	mov	r0, r3
 80006b8:	7f7b      	ldrb	r3, [r7, #29]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	4603      	mov	r3, r0
 80006be:	4817      	ldr	r0, [pc, #92]	; (800071c <Eth_network_init+0x168>)
 80006c0:	f003 fcb6 	bl	8004030 <iprintf>
	printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 80006c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80006c8:	4619      	mov	r1, r3
 80006ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006ce:	461a      	mov	r2, r3
 80006d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006d4:	4618      	mov	r0, r3
 80006d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	4603      	mov	r3, r0
 80006de:	4810      	ldr	r0, [pc, #64]	; (8000720 <Eth_network_init+0x16c>)
 80006e0:	f003 fca6 	bl	8004030 <iprintf>
	printf("======================\r\n");
 80006e4:	480f      	ldr	r0, [pc, #60]	; (8000724 <Eth_network_init+0x170>)
 80006e6:	f003 fd29 	bl	800413c <puts>
}
 80006ea:	bf00      	nop
 80006ec:	3738      	adds	r7, #56	; 0x38
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bdb0      	pop	{r4, r5, r7, pc}
 80006f2:	bf00      	nop
 80006f4:	08004f98 	.word	0x08004f98
 80006f8:	08004e90 	.word	0x08004e90
 80006fc:	08004eb4 	.word	0x08004eb4
 8000700:	08004fa8 	.word	0x08004fa8
 8000704:	08004ed8 	.word	0x08004ed8
 8000708:	08004fc0 	.word	0x08004fc0
 800070c:	08004ef0 	.word	0x08004ef0
 8000710:	08004f08 	.word	0x08004f08
 8000714:	08004f30 	.word	0x08004f30
 8000718:	08004f44 	.word	0x08004f44
 800071c:	08004f58 	.word	0x08004f58
 8000720:	08004f6c 	.word	0x08004f6c
 8000724:	08004f80 	.word	0x08004f80

08000728 <wizchip_select>:

void  wizchip_select(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	4802      	ldr	r0, [pc, #8]	; (800073c <wizchip_select+0x14>)
 8000734:	f000 fe54 	bl	80013e0 <HAL_GPIO_WritePin>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40020400 	.word	0x40020400

08000740 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074a:	4802      	ldr	r0, [pc, #8]	; (8000754 <wizchip_deselect+0x14>)
 800074c:	f000 fe48 	bl	80013e0 <HAL_GPIO_WritePin>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40020400 	.word	0x40020400

08000758 <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &wb, 1, 1000);
 8000762:	1df9      	adds	r1, r7, #7
 8000764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000768:	2201      	movs	r2, #1
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <wizchip_write+0x20>)
 800076c:	f001 fc8f 	bl	800208e <HAL_SPI_Transmit>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000bc 	.word	0x200000bc

0800077c <wizchip_read>:

uint8_t wizchip_read(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af02      	add	r7, sp, #8
	uint8_t buf[2];
	HAL_SPI_TransmitReceive(&hspi2, &buf[0],  &buf[1], 1, 100);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	1d39      	adds	r1, r7, #4
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <wizchip_read+0x24>)
 8000790:	f001 fdb9 	bl	8002306 <HAL_SPI_TransmitReceive>
    return buf[1];
 8000794:	797b      	ldrb	r3, [r7, #5]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000bc 	.word	0x200000bc

080007a4 <SPI_read_bus>:

void SPI_read_bus(uint8_t* pBuf, uint16_t len)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	807b      	strh	r3, [r7, #2]

	uint8_t *p = (uint8_t *)malloc(len);
 80007b0:	887b      	ldrh	r3, [r7, #2]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 fb44 	bl	8003e40 <malloc>
 80007b8:	4603      	mov	r3, r0
 80007ba:	60fb      	str	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi2, p,  pBuf, 1, len);
 80007bc:	887b      	ldrh	r3, [r7, #2]
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2301      	movs	r3, #1
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68f9      	ldr	r1, [r7, #12]
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <SPI_read_bus+0x38>)
 80007c8:	f001 fd9d 	bl	8002306 <HAL_SPI_TransmitReceive>
	free(p);
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	f003 fb3f 	bl	8003e50 <free>
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000bc 	.word	0x200000bc

080007e0 <SPI_Write_bus>:
void SPI_Write_bus(uint8_t* pBuf, uint16_t len)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi2, pBuf, len, 1000);
 80007ec:	887a      	ldrh	r2, [r7, #2]
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <SPI_Write_bus+0x24>)
 80007f6:	f001 fc4a 	bl	800208e <HAL_SPI_Transmit>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000bc 	.word	0x200000bc

08000808 <Spi_Ethernet_Init>:

// These vars will contain the hash
void Spi_Ethernet_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
    //Ethernet_chipcs_Init();
    reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 800080c:	4907      	ldr	r1, [pc, #28]	; (800082c <Spi_Ethernet_Init+0x24>)
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <Spi_Ethernet_Init+0x28>)
 8000810:	f002 fda6 	bl	8003360 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8000814:	4907      	ldr	r1, [pc, #28]	; (8000834 <Spi_Ethernet_Init+0x2c>)
 8000816:	4808      	ldr	r0, [pc, #32]	; (8000838 <Spi_Ethernet_Init+0x30>)
 8000818:	f002 fdc8 	bl	80033ac <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(SPI_read_bus,SPI_Write_bus);
 800081c:	4907      	ldr	r1, [pc, #28]	; (800083c <Spi_Ethernet_Init+0x34>)
 800081e:	4808      	ldr	r0, [pc, #32]	; (8000840 <Spi_Ethernet_Init+0x38>)
 8000820:	f002 fdf0 	bl	8003404 <reg_wizchip_spiburst_cbfunc>
	Eth_network_init();
 8000824:	f7ff fec6 	bl	80005b4 <Eth_network_init>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	08000741 	.word	0x08000741
 8000830:	08000729 	.word	0x08000729
 8000834:	08000759 	.word	0x08000759
 8000838:	0800077d 	.word	0x0800077d
 800083c:	080007e1 	.word	0x080007e1
 8000840:	080007a5 	.word	0x080007a5

08000844 <Test_Ethernet>:

uint8_t PC_addr[4] = {192,168,1,108};
void Test_Ethernet()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
	int socketID = socket(0,Sn_MR_TCP,50612, 0);
 800084a:	2300      	movs	r3, #0
 800084c:	f24c 52b4 	movw	r2, #50612	; 0xc5b4
 8000850:	2101      	movs	r1, #1
 8000852:	2000      	movs	r0, #0
 8000854:	f002 f9c6 	bl	8002be4 <socket>
 8000858:	4603      	mov	r3, r0
 800085a:	60fb      	str	r3, [r7, #12]
	if(socketID >=0 )
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2b00      	cmp	r3, #0
 8000860:	db12      	blt.n	8000888 <Test_Ethernet+0x44>
	{
		int cn = connect(socketID,PC_addr,54321);
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f24d 4231 	movw	r2, #54321	; 0xd431
 800086a:	490c      	ldr	r1, [pc, #48]	; (800089c <Test_Ethernet+0x58>)
 800086c:	4618      	mov	r0, r3
 800086e:	f002 fb3d 	bl	8002eec <connect>
 8000872:	4603      	mov	r3, r0
 8000874:	60bb      	str	r3, [r7, #8]
		if(cn == SOCK_OK )
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d105      	bne.n	8000888 <Test_Ethernet+0x44>
		{
			 int len = send(0,(uint8_t *)"hello world\n",strlen("hello world\n"));
 800087c:	220c      	movs	r2, #12
 800087e:	4908      	ldr	r1, [pc, #32]	; (80008a0 <Test_Ethernet+0x5c>)
 8000880:	2000      	movs	r0, #0
 8000882:	f002 fc0f 	bl	80030a4 <send>
 8000886:	6078      	str	r0, [r7, #4]
		}
	}
	close(socketID);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f002 fabf 	bl	8002e10 <close>
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000000 	.word	0x20000000
 80008a0:	08004fc4 	.word	0x08004fc4

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a8:	f000 fa8a 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ac:	f000 f812 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b0:	f000 f8b4 	bl	8000a1c <MX_GPIO_Init>
  MX_SPI2_Init();
 80008b4:	f000 f87c 	bl	80009b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80008b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008bc:	f000 faf2 	bl	8000ea4 <HAL_Delay>
  Spi_Ethernet_Init();
 80008c0:	f7ff ffa2 	bl	8000808 <Spi_Ethernet_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Test_Ethernet();
 80008c4:	f7ff ffbe 	bl	8000844 <Test_Ethernet>
	  HAL_Delay(1000);
 80008c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008cc:	f000 faea 	bl	8000ea4 <HAL_Delay>
	  Test_Ethernet();
 80008d0:	e7f8      	b.n	80008c4 <main+0x20>
	...

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	; 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2234      	movs	r2, #52	; 0x34
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f003 fabc 	bl	8003e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <SystemClock_Config+0xd4>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	4a29      	ldr	r2, [pc, #164]	; (80009a8 <SystemClock_Config+0xd4>)
 8000902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000906:	6413      	str	r3, [r2, #64]	; 0x40
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <SystemClock_Config+0xd4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000914:	2300      	movs	r3, #0
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <SystemClock_Config+0xd8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000920:	4a22      	ldr	r2, [pc, #136]	; (80009ac <SystemClock_Config+0xd8>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <SystemClock_Config+0xd8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093c:	2310      	movs	r3, #16
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000940:	2302      	movs	r3, #2
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000944:	2300      	movs	r3, #0
 8000946:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000948:	2308      	movs	r3, #8
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000954:	2302      	movs	r3, #2
 8000956:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000958:	2302      	movs	r3, #2
 800095a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4618      	mov	r0, r3
 8000962:	f001 f86d 	bl	8001a40 <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800096c:	f000 f8a8 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000970:	230f      	movs	r3, #15
 8000972:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000974:	2302      	movs	r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800097c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000980:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000986:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2103      	movs	r1, #3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fd40 	bl	8001414 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800099a:	f000 f891 	bl	8000ac0 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	; 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40007000 	.word	0x40007000

080009b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_SPI2_Init+0x64>)
 80009b6:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <MX_SPI2_Init+0x68>)
 80009b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_SPI2_Init+0x64>)
 80009bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_SPI2_Init+0x64>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_SPI2_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_SPI2_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_SPI2_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_SPI2_Init+0x64>)
 80009dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_SPI2_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_SPI2_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_SPI2_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_SPI2_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_SPI2_Init+0x64>)
 80009fc:	220a      	movs	r2, #10
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_SPI2_Init+0x64>)
 8000a02:	f001 fabb 	bl	8001f7c <HAL_SPI_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a0c:	f000 f858 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000bc 	.word	0x200000bc
 8000a18:	40003800 	.word	0x40003800

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_GPIO_Init+0x9c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <MX_GPIO_Init+0x9c>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <MX_GPIO_Init+0x9c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_GPIO_Init+0x9c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0x9c>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_GPIO_Init+0x9c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_GPIO_Init+0x9c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <MX_GPIO_Init+0x9c>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_GPIO_Init+0x9c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <MX_GPIO_Init+0xa0>)
 8000a8e:	f000 fca7 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_GPIO_Init+0xa0>)
 8000aac:	f000 fb04 	bl	80010b8 <HAL_GPIO_Init>

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <HAL_SPI_MspInit+0x84>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d12c      	bne.n	8000b98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b76:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b88:	2305      	movs	r3, #5
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_SPI_MspInit+0x8c>)
 8000b94:	f000 fa90 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	3728      	adds	r7, #40	; 0x28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40003800 	.word	0x40003800
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020400 	.word	0x40020400

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 f934 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	e00a      	b.n	8000c28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c12:	f3af 8000 	nop.w
 8000c16:	4601      	mov	r1, r0
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	60ba      	str	r2, [r7, #8]
 8000c1e:	b2ca      	uxtb	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbf0      	blt.n	8000c12 <_read+0x12>
	}

return len;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	e009      	b.n	8000c60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf1      	blt.n	8000c4c <_write+0x12>
	}
	return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_close>:

int _close(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
	return -1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_isatty>:

int _isatty(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	return 1;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
	return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f003 f86e 	bl	8003dec <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20020000 	.word	0x20020000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	20000114 	.word	0x20000114
 8000d44:	20000150 	.word	0x20000150

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d72:	490e      	ldr	r1, [pc, #56]	; (8000dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d88:	4c0b      	ldr	r4, [pc, #44]	; (8000db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d96:	f7ff ffd7 	bl	8000d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f003 f82d 	bl	8003df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fd81 	bl	80008a4 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000db0:	0800508c 	.word	0x0800508c
  ldr r2, =_sbss
 8000db4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000db8:	20000150 	.word	0x20000150

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <HAL_Init+0x40>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_Init+0x40>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x40>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f931 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	200f      	movs	r0, #15
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fe6a 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f93b 	bl	800109e <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f000 f911 	bl	8001066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000004 	.word	0x20000004
 8000e5c:	2000000c 	.word	0x2000000c
 8000e60:	20000008 	.word	0x20000008

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	20000118 	.word	0x20000118

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000118 	.word	0x20000118

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_Delay+0x44>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000000c 	.word	0x2000000c

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f7ff ff8e 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff47 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff5c 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff8e 	bl	8000fa4 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffb0 	bl	800100c <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e165      	b.n	80013a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f040 8154 	bne.w	800139a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d005      	beq.n	800110a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	2b02      	cmp	r3, #2
 8001108:	d130      	bne.n	800116c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b03      	cmp	r3, #3
 8001176:	d017      	beq.n	80011a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80ae 	beq.w	800139a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b5d      	ldr	r3, [pc, #372]	; (80013b8 <HAL_GPIO_Init+0x300>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a5c      	ldr	r2, [pc, #368]	; (80013b8 <HAL_GPIO_Init+0x300>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b5a      	ldr	r3, [pc, #360]	; (80013b8 <HAL_GPIO_Init+0x300>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125a:	4a58      	ldr	r2, [pc, #352]	; (80013bc <HAL_GPIO_Init+0x304>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4f      	ldr	r2, [pc, #316]	; (80013c0 <HAL_GPIO_Init+0x308>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d025      	beq.n	80012d2 <HAL_GPIO_Init+0x21a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4e      	ldr	r2, [pc, #312]	; (80013c4 <HAL_GPIO_Init+0x30c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d01f      	beq.n	80012ce <HAL_GPIO_Init+0x216>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4d      	ldr	r2, [pc, #308]	; (80013c8 <HAL_GPIO_Init+0x310>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d019      	beq.n	80012ca <HAL_GPIO_Init+0x212>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4c      	ldr	r2, [pc, #304]	; (80013cc <HAL_GPIO_Init+0x314>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_GPIO_Init+0x20e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4b      	ldr	r2, [pc, #300]	; (80013d0 <HAL_GPIO_Init+0x318>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d00d      	beq.n	80012c2 <HAL_GPIO_Init+0x20a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4a      	ldr	r2, [pc, #296]	; (80013d4 <HAL_GPIO_Init+0x31c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x206>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a49      	ldr	r2, [pc, #292]	; (80013d8 <HAL_GPIO_Init+0x320>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_GPIO_Init+0x202>
 80012b6:	2306      	movs	r3, #6
 80012b8:	e00c      	b.n	80012d4 <HAL_GPIO_Init+0x21c>
 80012ba:	2307      	movs	r3, #7
 80012bc:	e00a      	b.n	80012d4 <HAL_GPIO_Init+0x21c>
 80012be:	2305      	movs	r3, #5
 80012c0:	e008      	b.n	80012d4 <HAL_GPIO_Init+0x21c>
 80012c2:	2304      	movs	r3, #4
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x21c>
 80012c6:	2303      	movs	r3, #3
 80012c8:	e004      	b.n	80012d4 <HAL_GPIO_Init+0x21c>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_Init+0x21c>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_GPIO_Init+0x21c>
 80012d2:	2300      	movs	r3, #0
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	f002 0203 	and.w	r2, r2, #3
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	4093      	lsls	r3, r2
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e4:	4935      	ldr	r1, [pc, #212]	; (80013bc <HAL_GPIO_Init+0x304>)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <HAL_GPIO_Init+0x324>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001316:	4a31      	ldr	r2, [pc, #196]	; (80013dc <HAL_GPIO_Init+0x324>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131c:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <HAL_GPIO_Init+0x324>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001340:	4a26      	ldr	r2, [pc, #152]	; (80013dc <HAL_GPIO_Init+0x324>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <HAL_GPIO_Init+0x324>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800136a:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <HAL_GPIO_Init+0x324>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <HAL_GPIO_Init+0x324>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001394:	4a11      	ldr	r2, [pc, #68]	; (80013dc <HAL_GPIO_Init+0x324>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3301      	adds	r3, #1
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	f67f ae96 	bls.w	80010d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020800 	.word	0x40020800
 80013cc:	40020c00 	.word	0x40020c00
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40021400 	.word	0x40021400
 80013d8:	40021800 	.word	0x40021800
 80013dc:	40013c00 	.word	0x40013c00

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0cc      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001428:	4b68      	ldr	r3, [pc, #416]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d90c      	bls.n	8001450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001436:	4b65      	ldr	r3, [pc, #404]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800143e:	4b63      	ldr	r3, [pc, #396]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0b8      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d020      	beq.n	800149e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001468:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	4a58      	ldr	r2, [pc, #352]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001480:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4a52      	ldr	r2, [pc, #328]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800148a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800148c:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	494d      	ldr	r1, [pc, #308]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	4313      	orrs	r3, r2
 800149c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d044      	beq.n	8001534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d107      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d119      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e07f      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d003      	beq.n	80014d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d2:	4b3f      	ldr	r3, [pc, #252]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d109      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e06f      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e2:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e067      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f2:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f023 0203 	bic.w	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4934      	ldr	r1, [pc, #208]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	4313      	orrs	r3, r2
 8001502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001504:	f7ff fcc2 	bl	8000e8c <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	e00a      	b.n	8001522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150c:	f7ff fcbe 	bl	8000e8c <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e04f      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 020c 	and.w	r2, r3, #12
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	429a      	cmp	r2, r3
 8001532:	d1eb      	bne.n	800150c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001534:	4b25      	ldr	r3, [pc, #148]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d20c      	bcs.n	800155c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e032      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4916      	ldr	r1, [pc, #88]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	4313      	orrs	r3, r2
 8001578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d009      	beq.n	800159a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	490e      	ldr	r1, [pc, #56]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800159a:	f000 f821 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 800159e:	4602      	mov	r2, r0
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	490a      	ldr	r1, [pc, #40]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	5ccb      	ldrb	r3, [r1, r3]
 80015ae:	fa22 f303 	lsr.w	r3, r2, r3
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RCC_ClockConfig+0x1c8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fc22 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023c00 	.word	0x40023c00
 80015d0:	40023800 	.word	0x40023800
 80015d4:	08004fd4 	.word	0x08004fd4
 80015d8:	20000004 	.word	0x20000004
 80015dc:	20000008 	.word	0x20000008

080015e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015e4:	b0ae      	sub	sp, #184	; 0xb8
 80015e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001606:	4bcb      	ldr	r3, [pc, #812]	; (8001934 <HAL_RCC_GetSysClockFreq+0x354>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b0c      	cmp	r3, #12
 8001610:	f200 8206 	bhi.w	8001a20 <HAL_RCC_GetSysClockFreq+0x440>
 8001614:	a201      	add	r2, pc, #4	; (adr r2, 800161c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161a:	bf00      	nop
 800161c:	08001651 	.word	0x08001651
 8001620:	08001a21 	.word	0x08001a21
 8001624:	08001a21 	.word	0x08001a21
 8001628:	08001a21 	.word	0x08001a21
 800162c:	08001659 	.word	0x08001659
 8001630:	08001a21 	.word	0x08001a21
 8001634:	08001a21 	.word	0x08001a21
 8001638:	08001a21 	.word	0x08001a21
 800163c:	08001661 	.word	0x08001661
 8001640:	08001a21 	.word	0x08001a21
 8001644:	08001a21 	.word	0x08001a21
 8001648:	08001a21 	.word	0x08001a21
 800164c:	08001851 	.word	0x08001851
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001650:	4bb9      	ldr	r3, [pc, #740]	; (8001938 <HAL_RCC_GetSysClockFreq+0x358>)
 8001652:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001656:	e1e7      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001658:	4bb8      	ldr	r3, [pc, #736]	; (800193c <HAL_RCC_GetSysClockFreq+0x35c>)
 800165a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800165e:	e1e3      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001660:	4bb4      	ldr	r3, [pc, #720]	; (8001934 <HAL_RCC_GetSysClockFreq+0x354>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800166c:	4bb1      	ldr	r3, [pc, #708]	; (8001934 <HAL_RCC_GetSysClockFreq+0x354>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d071      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001678:	4bae      	ldr	r3, [pc, #696]	; (8001934 <HAL_RCC_GetSysClockFreq+0x354>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	099b      	lsrs	r3, r3, #6
 800167e:	2200      	movs	r2, #0
 8001680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001684:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800168c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001690:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800169a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800169e:	4622      	mov	r2, r4
 80016a0:	462b      	mov	r3, r5
 80016a2:	f04f 0000 	mov.w	r0, #0
 80016a6:	f04f 0100 	mov.w	r1, #0
 80016aa:	0159      	lsls	r1, r3, #5
 80016ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b0:	0150      	lsls	r0, r2, #5
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4621      	mov	r1, r4
 80016b8:	1a51      	subs	r1, r2, r1
 80016ba:	6439      	str	r1, [r7, #64]	; 0x40
 80016bc:	4629      	mov	r1, r5
 80016be:	eb63 0301 	sbc.w	r3, r3, r1
 80016c2:	647b      	str	r3, [r7, #68]	; 0x44
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80016d0:	4649      	mov	r1, r9
 80016d2:	018b      	lsls	r3, r1, #6
 80016d4:	4641      	mov	r1, r8
 80016d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016da:	4641      	mov	r1, r8
 80016dc:	018a      	lsls	r2, r1, #6
 80016de:	4641      	mov	r1, r8
 80016e0:	1a51      	subs	r1, r2, r1
 80016e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80016e4:	4649      	mov	r1, r9
 80016e6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80016f8:	4649      	mov	r1, r9
 80016fa:	00cb      	lsls	r3, r1, #3
 80016fc:	4641      	mov	r1, r8
 80016fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001702:	4641      	mov	r1, r8
 8001704:	00ca      	lsls	r2, r1, #3
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	4603      	mov	r3, r0
 800170c:	4622      	mov	r2, r4
 800170e:	189b      	adds	r3, r3, r2
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
 8001712:	462b      	mov	r3, r5
 8001714:	460a      	mov	r2, r1
 8001716:	eb42 0303 	adc.w	r3, r2, r3
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001728:	4629      	mov	r1, r5
 800172a:	024b      	lsls	r3, r1, #9
 800172c:	4621      	mov	r1, r4
 800172e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001732:	4621      	mov	r1, r4
 8001734:	024a      	lsls	r2, r1, #9
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800173e:	2200      	movs	r2, #0
 8001740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001744:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001748:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800174c:	f7fe fdb0 	bl	80002b0 <__aeabi_uldivmod>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4613      	mov	r3, r2
 8001756:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800175a:	e067      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175c:	4b75      	ldr	r3, [pc, #468]	; (8001934 <HAL_RCC_GetSysClockFreq+0x354>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	2200      	movs	r2, #0
 8001764:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001768:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800176c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001774:	67bb      	str	r3, [r7, #120]	; 0x78
 8001776:	2300      	movs	r3, #0
 8001778:	67fb      	str	r3, [r7, #124]	; 0x7c
 800177a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800177e:	4622      	mov	r2, r4
 8001780:	462b      	mov	r3, r5
 8001782:	f04f 0000 	mov.w	r0, #0
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	0159      	lsls	r1, r3, #5
 800178c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001790:	0150      	lsls	r0, r2, #5
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4621      	mov	r1, r4
 8001798:	1a51      	subs	r1, r2, r1
 800179a:	62b9      	str	r1, [r7, #40]	; 0x28
 800179c:	4629      	mov	r1, r5
 800179e:	eb63 0301 	sbc.w	r3, r3, r1
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80017b0:	4649      	mov	r1, r9
 80017b2:	018b      	lsls	r3, r1, #6
 80017b4:	4641      	mov	r1, r8
 80017b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ba:	4641      	mov	r1, r8
 80017bc:	018a      	lsls	r2, r1, #6
 80017be:	4641      	mov	r1, r8
 80017c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80017c4:	4649      	mov	r1, r9
 80017c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017de:	4692      	mov	sl, r2
 80017e0:	469b      	mov	fp, r3
 80017e2:	4623      	mov	r3, r4
 80017e4:	eb1a 0303 	adds.w	r3, sl, r3
 80017e8:	623b      	str	r3, [r7, #32]
 80017ea:	462b      	mov	r3, r5
 80017ec:	eb4b 0303 	adc.w	r3, fp, r3
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017fe:	4629      	mov	r1, r5
 8001800:	028b      	lsls	r3, r1, #10
 8001802:	4621      	mov	r1, r4
 8001804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001808:	4621      	mov	r1, r4
 800180a:	028a      	lsls	r2, r1, #10
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001814:	2200      	movs	r2, #0
 8001816:	673b      	str	r3, [r7, #112]	; 0x70
 8001818:	677a      	str	r2, [r7, #116]	; 0x74
 800181a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800181e:	f7fe fd47 	bl	80002b0 <__aeabi_uldivmod>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4613      	mov	r3, r2
 8001828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800182c:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_RCC_GetSysClockFreq+0x354>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	3301      	adds	r3, #1
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800183e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001842:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800184e:	e0eb      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001850:	4b38      	ldr	r3, [pc, #224]	; (8001934 <HAL_RCC_GetSysClockFreq+0x354>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800185c:	4b35      	ldr	r3, [pc, #212]	; (8001934 <HAL_RCC_GetSysClockFreq+0x354>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d06b      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001868:	4b32      	ldr	r3, [pc, #200]	; (8001934 <HAL_RCC_GetSysClockFreq+0x354>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	2200      	movs	r2, #0
 8001870:	66bb      	str	r3, [r7, #104]	; 0x68
 8001872:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800187a:	663b      	str	r3, [r7, #96]	; 0x60
 800187c:	2300      	movs	r3, #0
 800187e:	667b      	str	r3, [r7, #100]	; 0x64
 8001880:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001884:	4622      	mov	r2, r4
 8001886:	462b      	mov	r3, r5
 8001888:	f04f 0000 	mov.w	r0, #0
 800188c:	f04f 0100 	mov.w	r1, #0
 8001890:	0159      	lsls	r1, r3, #5
 8001892:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001896:	0150      	lsls	r0, r2, #5
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4621      	mov	r1, r4
 800189e:	1a51      	subs	r1, r2, r1
 80018a0:	61b9      	str	r1, [r7, #24]
 80018a2:	4629      	mov	r1, r5
 80018a4:	eb63 0301 	sbc.w	r3, r3, r1
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018b6:	4659      	mov	r1, fp
 80018b8:	018b      	lsls	r3, r1, #6
 80018ba:	4651      	mov	r1, sl
 80018bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c0:	4651      	mov	r1, sl
 80018c2:	018a      	lsls	r2, r1, #6
 80018c4:	4651      	mov	r1, sl
 80018c6:	ebb2 0801 	subs.w	r8, r2, r1
 80018ca:	4659      	mov	r1, fp
 80018cc:	eb63 0901 	sbc.w	r9, r3, r1
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018e4:	4690      	mov	r8, r2
 80018e6:	4699      	mov	r9, r3
 80018e8:	4623      	mov	r3, r4
 80018ea:	eb18 0303 	adds.w	r3, r8, r3
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	462b      	mov	r3, r5
 80018f2:	eb49 0303 	adc.w	r3, r9, r3
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001904:	4629      	mov	r1, r5
 8001906:	024b      	lsls	r3, r1, #9
 8001908:	4621      	mov	r1, r4
 800190a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800190e:	4621      	mov	r1, r4
 8001910:	024a      	lsls	r2, r1, #9
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800191a:	2200      	movs	r2, #0
 800191c:	65bb      	str	r3, [r7, #88]	; 0x58
 800191e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001920:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001924:	f7fe fcc4 	bl	80002b0 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001932:	e065      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x420>
 8001934:	40023800 	.word	0x40023800
 8001938:	00f42400 	.word	0x00f42400
 800193c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001940:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x458>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	099b      	lsrs	r3, r3, #6
 8001946:	2200      	movs	r2, #0
 8001948:	4618      	mov	r0, r3
 800194a:	4611      	mov	r1, r2
 800194c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001950:	653b      	str	r3, [r7, #80]	; 0x50
 8001952:	2300      	movs	r3, #0
 8001954:	657b      	str	r3, [r7, #84]	; 0x54
 8001956:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800195a:	4642      	mov	r2, r8
 800195c:	464b      	mov	r3, r9
 800195e:	f04f 0000 	mov.w	r0, #0
 8001962:	f04f 0100 	mov.w	r1, #0
 8001966:	0159      	lsls	r1, r3, #5
 8001968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800196c:	0150      	lsls	r0, r2, #5
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4641      	mov	r1, r8
 8001974:	1a51      	subs	r1, r2, r1
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	4649      	mov	r1, r9
 800197a:	eb63 0301 	sbc.w	r3, r3, r1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800198c:	4659      	mov	r1, fp
 800198e:	018b      	lsls	r3, r1, #6
 8001990:	4651      	mov	r1, sl
 8001992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001996:	4651      	mov	r1, sl
 8001998:	018a      	lsls	r2, r1, #6
 800199a:	4651      	mov	r1, sl
 800199c:	1a54      	subs	r4, r2, r1
 800199e:	4659      	mov	r1, fp
 80019a0:	eb63 0501 	sbc.w	r5, r3, r1
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	00eb      	lsls	r3, r5, #3
 80019ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b2:	00e2      	lsls	r2, r4, #3
 80019b4:	4614      	mov	r4, r2
 80019b6:	461d      	mov	r5, r3
 80019b8:	4643      	mov	r3, r8
 80019ba:	18e3      	adds	r3, r4, r3
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	464b      	mov	r3, r9
 80019c0:	eb45 0303 	adc.w	r3, r5, r3
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019d2:	4629      	mov	r1, r5
 80019d4:	028b      	lsls	r3, r1, #10
 80019d6:	4621      	mov	r1, r4
 80019d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019dc:	4621      	mov	r1, r4
 80019de:	028a      	lsls	r2, r1, #10
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019e8:	2200      	movs	r2, #0
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80019ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80019f2:	f7fe fc5d 	bl	80002b0 <__aeabi_uldivmod>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4613      	mov	r3, r2
 80019fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	0f1b      	lsrs	r3, r3, #28
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a1e:	e003      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	37b8      	adds	r7, #184	; 0xb8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	00f42400 	.word	0x00f42400

08001a40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e28d      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8083 	beq.w	8001b66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a60:	4b94      	ldr	r3, [pc, #592]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d019      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a6c:	4b91      	ldr	r3, [pc, #580]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a78:	4b8e      	ldr	r3, [pc, #568]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a84:	d00c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a86:	4b8b      	ldr	r3, [pc, #556]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d112      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a92:	4b88      	ldr	r3, [pc, #544]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	4b84      	ldr	r3, [pc, #528]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d05b      	beq.n	8001b64 <HAL_RCC_OscConfig+0x124>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d157      	bne.n	8001b64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e25a      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d106      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x90>
 8001ac2:	4b7c      	ldr	r3, [pc, #496]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7b      	ldr	r2, [pc, #492]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e01d      	b.n	8001b0c <HAL_RCC_OscConfig+0xcc>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0xb4>
 8001ada:	4b76      	ldr	r3, [pc, #472]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a75      	ldr	r2, [pc, #468]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b73      	ldr	r3, [pc, #460]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a72      	ldr	r2, [pc, #456]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0xcc>
 8001af4:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a6e      	ldr	r2, [pc, #440]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b6c      	ldr	r3, [pc, #432]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6b      	ldr	r2, [pc, #428]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff f9ba 	bl	8000e8c <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f9b6 	bl	8000e8c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	; 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e21f      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0xdc>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f9a6 	bl	8000e8c <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f9a2 	bl	8000e8c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e20b      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	4b57      	ldr	r3, [pc, #348]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x104>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d06f      	beq.n	8001c52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b72:	4b50      	ldr	r3, [pc, #320]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d017      	beq.n	8001bae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b7e:	4b4d      	ldr	r3, [pc, #308]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d105      	bne.n	8001b96 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b96:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d11c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba2:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d116      	bne.n	8001bdc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bae:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x186>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e1d3      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4937      	ldr	r1, [pc, #220]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	e03a      	b.n	8001c52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be4:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff f94f 	bl	8000e8c <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f94b 	bl	8000e8c <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e1b4      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4925      	ldr	r1, [pc, #148]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
 8001c24:	e015      	b.n	8001c52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f92e 	bl	8000e8c <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c34:	f7ff f92a 	bl	8000e8c <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e193      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d036      	beq.n	8001ccc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d016      	beq.n	8001c94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <HAL_RCC_OscConfig+0x27c>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6c:	f7ff f90e 	bl	8000e8c <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c74:	f7ff f90a 	bl	8000e8c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e173      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x234>
 8001c92:	e01b      	b.n	8001ccc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_OscConfig+0x27c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f8f7 	bl	8000e8c <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca0:	e00e      	b.n	8001cc0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca2:	f7ff f8f3 	bl	8000e8c <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d907      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e15c      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	42470000 	.word	0x42470000
 8001cbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	4b8a      	ldr	r3, [pc, #552]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1ea      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8097 	beq.w	8001e08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	4b83      	ldr	r3, [pc, #524]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10f      	bne.n	8001d0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	4b7f      	ldr	r3, [pc, #508]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a7e      	ldr	r2, [pc, #504]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b7c      	ldr	r3, [pc, #496]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	4b79      	ldr	r3, [pc, #484]	; (8001ef0 <HAL_RCC_OscConfig+0x4b0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d118      	bne.n	8001d48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d16:	4b76      	ldr	r3, [pc, #472]	; (8001ef0 <HAL_RCC_OscConfig+0x4b0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a75      	ldr	r2, [pc, #468]	; (8001ef0 <HAL_RCC_OscConfig+0x4b0>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d22:	f7ff f8b3 	bl	8000e8c <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2a:	f7ff f8af 	bl	8000e8c <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e118      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	4b6c      	ldr	r3, [pc, #432]	; (8001ef0 <HAL_RCC_OscConfig+0x4b0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d106      	bne.n	8001d5e <HAL_RCC_OscConfig+0x31e>
 8001d50:	4b66      	ldr	r3, [pc, #408]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	4a65      	ldr	r2, [pc, #404]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5c:	e01c      	b.n	8001d98 <HAL_RCC_OscConfig+0x358>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b05      	cmp	r3, #5
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x340>
 8001d66:	4b61      	ldr	r3, [pc, #388]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	4a60      	ldr	r2, [pc, #384]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	6713      	str	r3, [r2, #112]	; 0x70
 8001d72:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	4a5d      	ldr	r2, [pc, #372]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCC_OscConfig+0x358>
 8001d80:	4b5a      	ldr	r3, [pc, #360]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d84:	4a59      	ldr	r2, [pc, #356]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8c:	4b57      	ldr	r3, [pc, #348]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d90:	4a56      	ldr	r2, [pc, #344]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d92:	f023 0304 	bic.w	r3, r3, #4
 8001d96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d015      	beq.n	8001dcc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da0:	f7ff f874 	bl	8000e8c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da8:	f7ff f870 	bl	8000e8c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e0d7      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbe:	4b4b      	ldr	r3, [pc, #300]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0ee      	beq.n	8001da8 <HAL_RCC_OscConfig+0x368>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f85e 	bl	8000e8c <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f85a 	bl	8000e8c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0c1      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dea:	4b40      	ldr	r3, [pc, #256]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ee      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d105      	bne.n	8001e08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfc:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	4a3a      	ldr	r2, [pc, #232]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80ad 	beq.w	8001f6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e12:	4b36      	ldr	r3, [pc, #216]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d060      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d145      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <HAL_RCC_OscConfig+0x4b4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f82e 	bl	8000e8c <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff f82a 	bl	8000e8c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e093      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69da      	ldr	r2, [r3, #28]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	019b      	lsls	r3, r3, #6
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	085b      	lsrs	r3, r3, #1
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	041b      	lsls	r3, r3, #16
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	071b      	lsls	r3, r3, #28
 8001e7e:	491b      	ldr	r1, [pc, #108]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_RCC_OscConfig+0x4b4>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7fe ffff 	bl	8000e8c <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e92:	f7fe fffb 	bl	8000e8c <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e064      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x452>
 8001eb0:	e05c      	b.n	8001f6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_RCC_OscConfig+0x4b4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7fe ffe8 	bl	8000e8c <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe ffe4 	bl	8000e8c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e04d      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x480>
 8001ede:	e045      	b.n	8001f6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e040      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d030      	beq.n	8001f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d129      	bne.n	8001f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d122      	bne.n	8001f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f28:	4013      	ands	r3, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d119      	bne.n	8001f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	085b      	lsrs	r3, r3, #1
 8001f40:	3b01      	subs	r3, #1
 8001f42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d10f      	bne.n	8001f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e07b      	b.n	8002086 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d108      	bne.n	8001fa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f9e:	d009      	beq.n	8001fb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
 8001fa6:	e005      	b.n	8001fb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fda4 	bl	8000b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002038:	ea42 0103 	orr.w	r1, r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	f003 0104 	and.w	r1, r3, #4
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f003 0210 	and.w	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002074:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b088      	sub	sp, #32
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	4613      	mov	r3, r2
 800209c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_SPI_Transmit+0x22>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e126      	b.n	80022fe <HAL_SPI_Transmit+0x270>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020b8:	f7fe fee8 	bl	8000e8c <HAL_GetTick>
 80020bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d002      	beq.n	80020d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
 80020d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020d2:	e10b      	b.n	80022ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <HAL_SPI_Transmit+0x52>
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020e4:	e102      	b.n	80022ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2203      	movs	r2, #3
 80020ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	88fa      	ldrh	r2, [r7, #6]
 80020fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	88fa      	ldrh	r2, [r7, #6]
 8002104:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800212c:	d10f      	bne.n	800214e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800214c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002158:	2b40      	cmp	r3, #64	; 0x40
 800215a:	d007      	beq.n	800216c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800216a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002174:	d14b      	bne.n	800220e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_SPI_Transmit+0xf6>
 800217e:	8afb      	ldrh	r3, [r7, #22]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d13e      	bne.n	8002202 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	881a      	ldrh	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	1c9a      	adds	r2, r3, #2
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021a8:	e02b      	b.n	8002202 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d112      	bne.n	80021de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	881a      	ldrh	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	1c9a      	adds	r2, r3, #2
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	86da      	strh	r2, [r3, #54]	; 0x36
 80021dc:	e011      	b.n	8002202 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021de:	f7fe fe55 	bl	8000e8c <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d803      	bhi.n	80021f6 <HAL_SPI_Transmit+0x168>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f4:	d102      	bne.n	80021fc <HAL_SPI_Transmit+0x16e>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002200:	e074      	b.n	80022ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ce      	bne.n	80021aa <HAL_SPI_Transmit+0x11c>
 800220c:	e04c      	b.n	80022a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_SPI_Transmit+0x18e>
 8002216:	8afb      	ldrh	r3, [r7, #22]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d140      	bne.n	800229e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002242:	e02c      	b.n	800229e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b02      	cmp	r3, #2
 8002250:	d113      	bne.n	800227a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	330c      	adds	r3, #12
 800225c:	7812      	ldrb	r2, [r2, #0]
 800225e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	86da      	strh	r2, [r3, #54]	; 0x36
 8002278:	e011      	b.n	800229e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800227a:	f7fe fe07 	bl	8000e8c <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d803      	bhi.n	8002292 <HAL_SPI_Transmit+0x204>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d102      	bne.n	8002298 <HAL_SPI_Transmit+0x20a>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800229c:	e026      	b.n	80022ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1cd      	bne.n	8002244 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	6839      	ldr	r1, [r7, #0]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fa55 	bl	800275c <SPI_EndRxTxTransaction>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10a      	bne.n	80022dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	77fb      	strb	r3, [r7, #31]
 80022e8:	e000      	b.n	80022ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80022ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b08c      	sub	sp, #48	; 0x30
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002314:	2301      	movs	r3, #1
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_SPI_TransmitReceive+0x26>
 8002328:	2302      	movs	r3, #2
 800232a:	e18a      	b.n	8002642 <HAL_SPI_TransmitReceive+0x33c>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002334:	f7fe fdaa 	bl	8000e8c <HAL_GetTick>
 8002338:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800234e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002352:	2b01      	cmp	r3, #1
 8002354:	d00f      	beq.n	8002376 <HAL_SPI_TransmitReceive+0x70>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800235c:	d107      	bne.n	800236e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d103      	bne.n	800236e <HAL_SPI_TransmitReceive+0x68>
 8002366:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800236a:	2b04      	cmp	r3, #4
 800236c:	d003      	beq.n	8002376 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800236e:	2302      	movs	r3, #2
 8002370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002374:	e15b      	b.n	800262e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_SPI_TransmitReceive+0x82>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_SPI_TransmitReceive+0x82>
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d103      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800238e:	e14e      	b.n	800262e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b04      	cmp	r3, #4
 800239a:	d003      	beq.n	80023a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2205      	movs	r2, #5
 80023a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	887a      	ldrh	r2, [r7, #2]
 80023ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	887a      	ldrh	r2, [r7, #2]
 80023c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e4:	2b40      	cmp	r3, #64	; 0x40
 80023e6:	d007      	beq.n	80023f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002400:	d178      	bne.n	80024f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_SPI_TransmitReceive+0x10a>
 800240a:	8b7b      	ldrh	r3, [r7, #26]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d166      	bne.n	80024de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	881a      	ldrh	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	1c9a      	adds	r2, r3, #2
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002434:	e053      	b.n	80024de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b02      	cmp	r3, #2
 8002442:	d11b      	bne.n	800247c <HAL_SPI_TransmitReceive+0x176>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d016      	beq.n	800247c <HAL_SPI_TransmitReceive+0x176>
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	2b01      	cmp	r3, #1
 8002452:	d113      	bne.n	800247c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	881a      	ldrh	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	1c9a      	adds	r2, r3, #2
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800246e:	b29b      	uxth	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d119      	bne.n	80024be <HAL_SPI_TransmitReceive+0x1b8>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d014      	beq.n	80024be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	b292      	uxth	r2, r2
 80024a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	1c9a      	adds	r2, r3, #2
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024ba:	2301      	movs	r3, #1
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024be:	f7fe fce5 	bl	8000e8c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d807      	bhi.n	80024de <HAL_SPI_TransmitReceive+0x1d8>
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d003      	beq.n	80024de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024dc:	e0a7      	b.n	800262e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1a6      	bne.n	8002436 <HAL_SPI_TransmitReceive+0x130>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1a1      	bne.n	8002436 <HAL_SPI_TransmitReceive+0x130>
 80024f2:	e07c      	b.n	80025ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_SPI_TransmitReceive+0x1fc>
 80024fc:	8b7b      	ldrh	r3, [r7, #26]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d16b      	bne.n	80025da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	330c      	adds	r3, #12
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002528:	e057      	b.n	80025da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b02      	cmp	r3, #2
 8002536:	d11c      	bne.n	8002572 <HAL_SPI_TransmitReceive+0x26c>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d017      	beq.n	8002572 <HAL_SPI_TransmitReceive+0x26c>
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	2b01      	cmp	r3, #1
 8002546:	d114      	bne.n	8002572 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	330c      	adds	r3, #12
 8002552:	7812      	ldrb	r2, [r2, #0]
 8002554:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d119      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x2ae>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d014      	beq.n	80025b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025b0:	2301      	movs	r3, #1
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025b4:	f7fe fc6a 	bl	8000e8c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d803      	bhi.n	80025cc <HAL_SPI_TransmitReceive+0x2c6>
 80025c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d102      	bne.n	80025d2 <HAL_SPI_TransmitReceive+0x2cc>
 80025cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025d8:	e029      	b.n	800262e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1a2      	bne.n	800252a <HAL_SPI_TransmitReceive+0x224>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d19d      	bne.n	800252a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f8b2 	bl	800275c <SPI_EndRxTxTransaction>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800260a:	e010      	b.n	800262e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	e000      	b.n	800262e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800262c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800263e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002642:	4618      	mov	r0, r3
 8002644:	3730      	adds	r7, #48	; 0x30
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800265c:	f7fe fc16 	bl	8000e8c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	4413      	add	r3, r2
 800266a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800266c:	f7fe fc0e 	bl	8000e8c <HAL_GetTick>
 8002670:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	015b      	lsls	r3, r3, #5
 8002678:	0d1b      	lsrs	r3, r3, #20
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	fb02 f303 	mul.w	r3, r2, r3
 8002680:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002682:	e054      	b.n	800272e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268a:	d050      	beq.n	800272e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800268c:	f7fe fbfe 	bl	8000e8c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	429a      	cmp	r2, r3
 800269a:	d902      	bls.n	80026a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d13d      	bne.n	800271e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ba:	d111      	bne.n	80026e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c4:	d004      	beq.n	80026d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ce:	d107      	bne.n	80026e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e8:	d10f      	bne.n	800270a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002708:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e017      	b.n	800274e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	3b01      	subs	r3, #1
 800272c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4013      	ands	r3, r2
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	bf0c      	ite	eq
 800273e:	2301      	moveq	r3, #1
 8002740:	2300      	movne	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	429a      	cmp	r2, r3
 800274a:	d19b      	bne.n	8002684 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000004 	.word	0x20000004

0800275c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <SPI_EndRxTxTransaction+0x7c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1b      	ldr	r2, [pc, #108]	; (80027dc <SPI_EndRxTxTransaction+0x80>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	0d5b      	lsrs	r3, r3, #21
 8002774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002778:	fb02 f303 	mul.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002786:	d112      	bne.n	80027ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2200      	movs	r2, #0
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f7ff ff5a 	bl	800264c <SPI_WaitFlagStateUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e00f      	b.n	80027ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c4:	2b80      	cmp	r3, #128	; 0x80
 80027c6:	d0f2      	beq.n	80027ae <SPI_EndRxTxTransaction+0x52>
 80027c8:	e000      	b.n	80027cc <SPI_EndRxTxTransaction+0x70>
        break;
 80027ca:	bf00      	nop
  }

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000004 	.word	0x20000004
 80027dc:	165e9f81 	.word	0x165e9f81

080027e0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <WIZCHIP_READ+0x94>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4798      	blx	r3
   WIZCHIP.CS._select();
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <WIZCHIP_READ+0x94>)
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80027f4:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <WIZCHIP_READ+0x94>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <WIZCHIP_READ+0x24>
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <WIZCHIP_READ+0x94>)
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d114      	bne.n	800282e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <WIZCHIP_READ+0x94>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	0c12      	lsrs	r2, r2, #16
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	4610      	mov	r0, r2
 8002810:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002812:	4b18      	ldr	r3, [pc, #96]	; (8002874 <WIZCHIP_READ+0x94>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	0a12      	lsrs	r2, r2, #8
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	4610      	mov	r0, r2
 800281e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <WIZCHIP_READ+0x94>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	4610      	mov	r0, r2
 800282a:	4798      	blx	r3
 800282c:	e011      	b.n	8002852 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	b2db      	uxtb	r3, r3
 8002834:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	b2db      	uxtb	r3, r3
 800283c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <WIZCHIP_READ+0x94>)
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	f107 020c 	add.w	r2, r7, #12
 800284c:	2103      	movs	r1, #3
 800284e:	4610      	mov	r0, r2
 8002850:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <WIZCHIP_READ+0x94>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	4798      	blx	r3
 8002858:	4603      	mov	r3, r0
 800285a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <WIZCHIP_READ+0x94>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <WIZCHIP_READ+0x94>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	4798      	blx	r3
   return ret;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000010 	.word	0x20000010

08002878 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002884:	4b22      	ldr	r3, [pc, #136]	; (8002910 <WIZCHIP_WRITE+0x98>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4798      	blx	r3
   WIZCHIP.CS._select();
 800288a:	4b21      	ldr	r3, [pc, #132]	; (8002910 <WIZCHIP_WRITE+0x98>)
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <WIZCHIP_WRITE+0x98>)
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	2b00      	cmp	r3, #0
 800289e:	d119      	bne.n	80028d4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <WIZCHIP_WRITE+0x98>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	0c12      	lsrs	r2, r2, #16
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	4610      	mov	r0, r2
 80028ac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <WIZCHIP_WRITE+0x98>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	0a12      	lsrs	r2, r2, #8
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	4610      	mov	r0, r2
 80028ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <WIZCHIP_WRITE+0x98>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	4610      	mov	r0, r2
 80028c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <WIZCHIP_WRITE+0x98>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	4610      	mov	r0, r2
 80028d0:	4798      	blx	r3
 80028d2:	e013      	b.n	80028fc <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	0c1b      	lsrs	r3, r3, #16
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <WIZCHIP_WRITE+0x98>)
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	f107 020c 	add.w	r2, r7, #12
 80028f6:	2104      	movs	r1, #4
 80028f8:	4610      	mov	r0, r2
 80028fa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <WIZCHIP_WRITE+0x98>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002902:	4b03      	ldr	r3, [pc, #12]	; (8002910 <WIZCHIP_WRITE+0x98>)
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	4798      	blx	r3
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000010 	.word	0x20000010

08002914 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	4613      	mov	r3, r2
 8002920:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002922:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <WIZCHIP_READ_BUF+0xbc>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002928:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <WIZCHIP_READ_BUF+0xbc>)
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800292e:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <WIZCHIP_READ_BUF+0xbc>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <WIZCHIP_READ_BUF+0x2a>
 8002936:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <WIZCHIP_READ_BUF+0xbc>)
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	2b00      	cmp	r3, #0
 800293c:	d126      	bne.n	800298c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <WIZCHIP_READ_BUF+0xbc>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	0c12      	lsrs	r2, r2, #16
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	4610      	mov	r0, r2
 800294a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800294c:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <WIZCHIP_READ_BUF+0xbc>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	0a12      	lsrs	r2, r2, #8
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	4610      	mov	r0, r2
 8002958:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <WIZCHIP_READ_BUF+0xbc>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	4610      	mov	r0, r2
 8002964:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002966:	2300      	movs	r3, #0
 8002968:	82fb      	strh	r3, [r7, #22]
 800296a:	e00a      	b.n	8002982 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <WIZCHIP_READ_BUF+0xbc>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	8afa      	ldrh	r2, [r7, #22]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	188c      	adds	r4, r1, r2
 8002976:	4798      	blx	r3
 8002978:	4603      	mov	r3, r0
 800297a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800297c:	8afb      	ldrh	r3, [r7, #22]
 800297e:	3301      	adds	r3, #1
 8002980:	82fb      	strh	r3, [r7, #22]
 8002982:	8afa      	ldrh	r2, [r7, #22]
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	429a      	cmp	r2, r3
 8002988:	d3f0      	bcc.n	800296c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800298a:	e017      	b.n	80029bc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	0c1b      	lsrs	r3, r3, #16
 8002990:	b2db      	uxtb	r3, r3
 8002992:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	b2db      	uxtb	r3, r3
 800299a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <WIZCHIP_READ_BUF+0xbc>)
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	f107 0210 	add.w	r2, r7, #16
 80029aa:	2103      	movs	r1, #3
 80029ac:	4610      	mov	r0, r2
 80029ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <WIZCHIP_READ_BUF+0xbc>)
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	4611      	mov	r1, r2
 80029b8:	68b8      	ldr	r0, [r7, #8]
 80029ba:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <WIZCHIP_READ_BUF+0xbc>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80029c2:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <WIZCHIP_READ_BUF+0xbc>)
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	4798      	blx	r3
}
 80029c8:	bf00      	nop
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd90      	pop	{r4, r7, pc}
 80029d0:	20000010 	.word	0x20000010

080029d4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80029e2:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <WIZCHIP_WRITE_BUF+0xbc>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80029e8:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <WIZCHIP_WRITE_BUF+0xbc>)
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80029f6:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <WIZCHIP_WRITE_BUF+0xbc>)
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d126      	bne.n	8002a4c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <WIZCHIP_WRITE_BUF+0xbc>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	0c12      	lsrs	r2, r2, #16
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002a0c:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <WIZCHIP_WRITE_BUF+0xbc>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	0a12      	lsrs	r2, r2, #8
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	4610      	mov	r0, r2
 8002a18:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <WIZCHIP_WRITE_BUF+0xbc>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	4610      	mov	r0, r2
 8002a24:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	82fb      	strh	r3, [r7, #22]
 8002a2a:	e00a      	b.n	8002a42 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002a2c:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <WIZCHIP_WRITE_BUF+0xbc>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	8afa      	ldrh	r2, [r7, #22]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	440a      	add	r2, r1
 8002a36:	7812      	ldrb	r2, [r2, #0]
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002a3c:	8afb      	ldrh	r3, [r7, #22]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	82fb      	strh	r3, [r7, #22]
 8002a42:	8afa      	ldrh	r2, [r7, #22]
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d3f0      	bcc.n	8002a2c <WIZCHIP_WRITE_BUF+0x58>
 8002a4a:	e017      	b.n	8002a7c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	0c1b      	lsrs	r3, r3, #16
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <WIZCHIP_WRITE_BUF+0xbc>)
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	f107 0210 	add.w	r2, r7, #16
 8002a6a:	2103      	movs	r1, #3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <WIZCHIP_WRITE_BUF+0xbc>)
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	88fa      	ldrh	r2, [r7, #6]
 8002a76:	4611      	mov	r1, r2
 8002a78:	68b8      	ldr	r0, [r7, #8]
 8002a7a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <WIZCHIP_WRITE_BUF+0xbc>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002a82:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <WIZCHIP_WRITE_BUF+0xbc>)
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	4798      	blx	r3
}
 8002a88:	bf00      	nop
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000010 	.word	0x20000010

08002a94 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	81fb      	strh	r3, [r7, #14]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	3301      	adds	r3, #1
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fe94 	bl	80027e0 <WIZCHIP_READ>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002abc:	89bb      	ldrh	r3, [r7, #12]
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	b29c      	uxth	r4, r3
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fe86 	bl	80027e0 <WIZCHIP_READ>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	4423      	add	r3, r4
 8002ada:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002adc:	89bb      	ldrh	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01a      	beq.n	8002b18 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fe76 	bl	80027e0 <WIZCHIP_READ>
 8002af4:	4603      	mov	r3, r0
 8002af6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002af8:	89fb      	ldrh	r3, [r7, #14]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	b29c      	uxth	r4, r3
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	3301      	adds	r3, #1
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fe68 	bl	80027e0 <WIZCHIP_READ>
 8002b10:	4603      	mov	r3, r0
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4423      	add	r3, r4
 8002b16:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002b18:	89fa      	ldrh	r2, [r7, #14]
 8002b1a:	89bb      	ldrh	r3, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d1c2      	bne.n	8002aa6 <getSn_TX_FSR+0x12>
   return val;
 8002b20:	89fb      	ldrh	r3, [r7, #14]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd90      	pop	{r4, r7, pc}

08002b2a <wiz_send_data>:
   }while (val != val1);
   return val;
}

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002b2a:	b590      	push	{r4, r7, lr}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	6039      	str	r1, [r7, #0]
 8002b34:	71fb      	strb	r3, [r7, #7]
 8002b36:	4613      	mov	r3, r2
 8002b38:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002b42:	88bb      	ldrh	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d048      	beq.n	8002bda <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fe43 	bl	80027e0 <WIZCHIP_READ>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	b29c      	uxth	r4, r3
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	3301      	adds	r3, #1
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fe36 	bl	80027e0 <WIZCHIP_READ>
 8002b74:	4603      	mov	r3, r0
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4423      	add	r3, r4
 8002b7a:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002b7c:	89fb      	ldrh	r3, [r7, #14]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	79fa      	ldrb	r2, [r7, #7]
 8002b82:	0092      	lsls	r2, r2, #2
 8002b84:	3202      	adds	r2, #2
 8002b86:	00d2      	lsls	r2, r2, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002b8c:	88bb      	ldrh	r3, [r7, #4]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6839      	ldr	r1, [r7, #0]
 8002b92:	68b8      	ldr	r0, [r7, #8]
 8002b94:	f7ff ff1e 	bl	80029d4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002b98:	89fa      	ldrh	r2, [r7, #14]
 8002b9a:	88bb      	ldrh	r3, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002bac:	461a      	mov	r2, r3
 8002bae:	89fb      	ldrh	r3, [r7, #14]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f7ff fe5d 	bl	8002878 <WIZCHIP_WRITE>
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002bca:	461a      	mov	r2, r3
 8002bcc:	89fb      	ldrh	r3, [r7, #14]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f7ff fe50 	bl	8002878 <WIZCHIP_WRITE>
 8002bd8:	e000      	b.n	8002bdc <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002bda:	bf00      	nop
}
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}
	...

08002be4 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4604      	mov	r4, r0
 8002bec:	4608      	mov	r0, r1
 8002bee:	4611      	mov	r1, r2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	71fb      	strb	r3, [r7, #7]
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71bb      	strb	r3, [r7, #6]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	80bb      	strh	r3, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d902      	bls.n	8002c0e <socket+0x2a>
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0c:	e0f2      	b.n	8002df4 <socket+0x210>
	switch(protocol)
 8002c0e:	79bb      	ldrb	r3, [r7, #6]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d005      	beq.n	8002c20 <socket+0x3c>
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	dd11      	ble.n	8002c3c <socket+0x58>
 8002c18:	3b02      	subs	r3, #2
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d80e      	bhi.n	8002c3c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002c1e:	e011      	b.n	8002c44 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	2204      	movs	r2, #4
 8002c26:	4619      	mov	r1, r3
 8002c28:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002c2c:	f7ff fe72 	bl	8002914 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d105      	bne.n	8002c42 <socket+0x5e>
 8002c36:	f06f 0302 	mvn.w	r3, #2
 8002c3a:	e0db      	b.n	8002df4 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002c3c:	f06f 0304 	mvn.w	r3, #4
 8002c40:	e0d8      	b.n	8002df4 <socket+0x210>
	    break;
 8002c42:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <socket+0x70>
 8002c4e:	f06f 0305 	mvn.w	r3, #5
 8002c52:	e0cf      	b.n	8002df4 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d025      	beq.n	8002ca6 <socket+0xc2>
	{
   	switch(protocol)
 8002c5a:	79bb      	ldrb	r3, [r7, #6]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d002      	beq.n	8002c66 <socket+0x82>
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d008      	beq.n	8002c76 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002c64:	e024      	b.n	8002cb0 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d11c      	bne.n	8002caa <socket+0xc6>
 8002c70:	f06f 0305 	mvn.w	r3, #5
 8002c74:	e0be      	b.n	8002df4 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	db02      	blt.n	8002c8e <socket+0xaa>
 8002c88:	f06f 0305 	mvn.w	r3, #5
 8002c8c:	e0b2      	b.n	8002df4 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	db06      	blt.n	8002cae <socket+0xca>
 8002ca0:	f06f 0305 	mvn.w	r3, #5
 8002ca4:	e0a6      	b.n	8002df4 <socket+0x210>
   	}
   }
 8002ca6:	bf00      	nop
 8002ca8:	e002      	b.n	8002cb0 <socket+0xcc>
   	      break;
 8002caa:	bf00      	nop
 8002cac:	e000      	b.n	8002cb0 <socket+0xcc>
   	      break;
 8002cae:	bf00      	nop
	close(sn);
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f8ac 	bl	8002e10 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cc6:	f023 030f 	bic.w	r3, r3, #15
 8002cca:	b25a      	sxtb	r2, r3
 8002ccc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	b25b      	sxtb	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f7ff fdce 	bl	8002878 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002cdc:	88bb      	ldrh	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d110      	bne.n	8002d04 <socket+0x120>
	{
	   port = sock_any_port++;
 8002ce2:	4b46      	ldr	r3, [pc, #280]	; (8002dfc <socket+0x218>)
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	b291      	uxth	r1, r2
 8002cea:	4a44      	ldr	r2, [pc, #272]	; (8002dfc <socket+0x218>)
 8002cec:	8011      	strh	r1, [r2, #0]
 8002cee:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002cf0:	4b42      	ldr	r3, [pc, #264]	; (8002dfc <socket+0x218>)
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d103      	bne.n	8002d04 <socket+0x120>
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <socket+0x218>)
 8002cfe:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002d02:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	3301      	adds	r3, #1
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d10:	461a      	mov	r2, r3
 8002d12:	88bb      	ldrh	r3, [r7, #4]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f7ff fdab 	bl	8002878 <WIZCHIP_WRITE>
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	3301      	adds	r3, #1
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	461a      	mov	r2, r3
 8002d30:	88bb      	ldrh	r3, [r7, #4]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	4619      	mov	r1, r3
 8002d36:	4610      	mov	r0, r2
 8002d38:	f7ff fd9e 	bl	8002878 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	3301      	adds	r3, #1
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fd94 	bl	8002878 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002d50:	bf00      	nop
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	3301      	adds	r3, #1
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fd3e 	bl	80027e0 <WIZCHIP_READ>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f3      	bne.n	8002d52 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	b21a      	sxth	r2, r3
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <socket+0x21c>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b21b      	sxth	r3, r3
 8002d7e:	4013      	ands	r3, r2
 8002d80:	b21b      	sxth	r3, r3
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <socket+0x21c>)
 8002d86:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	f003 0201 	and.w	r2, r3, #1
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	b21a      	sxth	r2, r3
 8002d96:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <socket+0x21c>)
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b21b      	sxth	r3, r3
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	b21b      	sxth	r3, r3
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <socket+0x21c>)
 8002da4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	2201      	movs	r2, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	b21b      	sxth	r3, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <socket+0x220>)
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b21b      	sxth	r3, r3
 8002dba:	4013      	ands	r3, r2
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <socket+0x220>)
 8002dc2:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <socket+0x224>)
 8002dc8:	2100      	movs	r1, #0
 8002dca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <socket+0x228>)
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002dd6:	bf00      	nop
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	3301      	adds	r3, #1
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fcfb 	bl	80027e0 <WIZCHIP_READ>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f3      	beq.n	8002dd8 <socket+0x1f4>
   return (int8_t)sn;
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd90      	pop	{r4, r7, pc}
 8002dfc:	2000000e 	.word	0x2000000e
 8002e00:	2000011c 	.word	0x2000011c
 8002e04:	2000011e 	.word	0x2000011e
 8002e08:	20000120 	.word	0x20000120
 8002e0c:	20000130 	.word	0x20000130

08002e10 <close>:

int8_t close(uint8_t sn)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d902      	bls.n	8002e26 <close+0x16>
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295
 8002e24:	e055      	b.n	8002ed2 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e32:	2110      	movs	r1, #16
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fd1f 	bl	8002878 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002e3a:	bf00      	nop
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	3301      	adds	r3, #1
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fcc9 	bl	80027e0 <WIZCHIP_READ>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f3      	bne.n	8002e3c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	3301      	adds	r3, #1
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e60:	211f      	movs	r1, #31
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fd08 	bl	8002878 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	b21a      	sxth	r2, r3
 8002e76:	4b19      	ldr	r3, [pc, #100]	; (8002edc <close+0xcc>)
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	b21b      	sxth	r3, r3
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	b21b      	sxth	r3, r3
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	4b16      	ldr	r3, [pc, #88]	; (8002edc <close+0xcc>)
 8002e84:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	b21b      	sxth	r3, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	b21a      	sxth	r2, r3
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <close+0xd0>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	b21b      	sxth	r3, r3
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	b21b      	sxth	r3, r3
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <close+0xd0>)
 8002ea2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	4a0f      	ldr	r2, [pc, #60]	; (8002ee4 <close+0xd4>)
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ee8 <close+0xd8>)
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002eb6:	bf00      	nop
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fc8b 	bl	80027e0 <WIZCHIP_READ>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f3      	bne.n	8002eb8 <close+0xa8>
	return SOCK_OK;
 8002ed0:	2301      	movs	r3, #1
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000011c 	.word	0x2000011c
 8002ee0:	2000011e 	.word	0x2000011e
 8002ee4:	20000120 	.word	0x20000120
 8002ee8:	20000130 	.word	0x20000130

08002eec <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	71fb      	strb	r3, [r7, #7]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d902      	bls.n	8002f08 <connect+0x1c>
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	e0c6      	b.n	8003096 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fc65 	bl	80027e0 <WIZCHIP_READ>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d002      	beq.n	8002f26 <connect+0x3a>
 8002f20:	f06f 0304 	mvn.w	r3, #4
 8002f24:	e0b7      	b.n	8003096 <connect+0x1aa>
   CHECK_SOCKINIT();
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fc54 	bl	80027e0 <WIZCHIP_READ>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b13      	cmp	r3, #19
 8002f3c:	d002      	beq.n	8002f44 <connect+0x58>
 8002f3e:	f06f 0302 	mvn.w	r3, #2
 8002f42:	e0a8      	b.n	8003096 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	3201      	adds	r2, #1
 8002f52:	7812      	ldrb	r2, [r2, #0]
 8002f54:	4413      	add	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	3202      	adds	r2, #2
 8002f60:	7812      	ldrb	r2, [r2, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	3203      	adds	r2, #3
 8002f6e:	7812      	ldrb	r2, [r2, #0]
 8002f70:	4413      	add	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d002      	beq.n	8002f82 <connect+0x96>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <connect+0x9c>
 8002f82:	f06f 030b 	mvn.w	r3, #11
 8002f86:	e086      	b.n	8003096 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8002f88:	88bb      	ldrh	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <connect+0xa8>
 8002f8e:	f06f 030a 	mvn.w	r3, #10
 8002f92:	e080      	b.n	8003096 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	3301      	adds	r3, #1
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	6839      	ldr	r1, [r7, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fd15 	bl	80029d4 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	3301      	adds	r3, #1
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	88bb      	ldrh	r3, [r7, #4]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7ff fc58 	bl	8002878 <WIZCHIP_WRITE>
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	3301      	adds	r3, #1
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	88bb      	ldrh	r3, [r7, #4]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f7ff fc4b 	bl	8002878 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002fee:	2104      	movs	r1, #4
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fc41 	bl	8002878 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002ff6:	bf00      	nop
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fbeb 	bl	80027e0 <WIZCHIP_READ>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f3      	bne.n	8002ff8 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003010:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <connect+0x1b4>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	fa42 f303 	asr.w	r3, r2, r3
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d02b      	beq.n	800307c <connect+0x190>
 8003024:	2300      	movs	r3, #0
 8003026:	e036      	b.n	8003096 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	3301      	adds	r3, #1
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fbd3 	bl	80027e0 <WIZCHIP_READ>
 800303a:	4603      	mov	r3, r0
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00c      	beq.n	800305e <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	3301      	adds	r3, #1
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003050:	2108      	movs	r1, #8
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fc10 	bl	8002878 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8003058:	f06f 030c 	mvn.w	r3, #12
 800305c:	e01b      	b.n	8003096 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	3301      	adds	r3, #1
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fbb8 	bl	80027e0 <WIZCHIP_READ>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8003076:	f06f 0303 	mvn.w	r3, #3
 800307a:	e00c      	b.n	8003096 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	3301      	adds	r3, #1
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fba9 	bl	80027e0 <WIZCHIP_READ>
 800308e:	4603      	mov	r3, r0
 8003090:	2b17      	cmp	r3, #23
 8003092:	d1c9      	bne.n	8003028 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8003094:	2301      	movs	r3, #1
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	2000011c 	.word	0x2000011c

080030a4 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	71fb      	strb	r3, [r7, #7]
 80030b0:	4613      	mov	r3, r2
 80030b2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d902      	bls.n	80030c8 <send+0x24>
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
 80030c6:	e0de      	b.n	8003286 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	3301      	adds	r3, #1
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fb85 	bl	80027e0 <WIZCHIP_READ>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d002      	beq.n	80030e6 <send+0x42>
 80030e0:	f06f 0304 	mvn.w	r3, #4
 80030e4:	e0cf      	b.n	8003286 <send+0x1e2>
   CHECK_SOCKDATA();
 80030e6:	88bb      	ldrh	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <send+0x4e>
 80030ec:	f06f 030d 	mvn.w	r3, #13
 80030f0:	e0c9      	b.n	8003286 <send+0x1e2>
   tmp = getSn_SR(sn);
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	3301      	adds	r3, #1
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fb6e 	bl	80027e0 <WIZCHIP_READ>
 8003104:	4603      	mov	r3, r0
 8003106:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b17      	cmp	r3, #23
 800310c:	d005      	beq.n	800311a <send+0x76>
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b1c      	cmp	r3, #28
 8003112:	d002      	beq.n	800311a <send+0x76>
 8003114:	f06f 0306 	mvn.w	r3, #6
 8003118:	e0b5      	b.n	8003286 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800311a:	4b5d      	ldr	r3, [pc, #372]	; (8003290 <send+0x1ec>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	fa42 f303 	asr.w	r3, r2, r3
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d039      	beq.n	80031a2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	3301      	adds	r3, #1
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fb50 	bl	80027e0 <WIZCHIP_READ>
 8003140:	4603      	mov	r3, r0
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d019      	beq.n	8003186 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	3301      	adds	r3, #1
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800315e:	2110      	movs	r1, #16
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fb89 	bl	8002878 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	2201      	movs	r2, #1
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	b21b      	sxth	r3, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	b21a      	sxth	r2, r3
 8003174:	4b46      	ldr	r3, [pc, #280]	; (8003290 <send+0x1ec>)
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	b21b      	sxth	r3, r3
 800317a:	4013      	ands	r3, r2
 800317c:	b21b      	sxth	r3, r3
 800317e:	b29a      	uxth	r2, r3
 8003180:	4b43      	ldr	r3, [pc, #268]	; (8003290 <send+0x1ec>)
 8003182:	801a      	strh	r2, [r3, #0]
 8003184:	e00d      	b.n	80031a2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <send+0xfa>
      {
         close(sn);
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fe3c 	bl	8002e10 <close>
         return SOCKERR_TIMEOUT;
 8003198:	f06f 030c 	mvn.w	r3, #12
 800319c:	e073      	b.n	8003286 <send+0x1e2>
      }
      else return SOCK_BUSY;
 800319e:	2300      	movs	r3, #0
 80031a0:	e071      	b.n	8003286 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	3301      	adds	r3, #1
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fb16 	bl	80027e0 <WIZCHIP_READ>
 80031b4:	4603      	mov	r3, r0
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	029b      	lsls	r3, r3, #10
 80031ba:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80031bc:	88ba      	ldrh	r2, [r7, #4]
 80031be:	89bb      	ldrh	r3, [r7, #12]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d901      	bls.n	80031c8 <send+0x124>
 80031c4:	89bb      	ldrh	r3, [r7, #12]
 80031c6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fc62 	bl	8002a94 <getSn_TX_FSR>
 80031d0:	4603      	mov	r3, r0
 80031d2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	3301      	adds	r3, #1
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fafd 	bl	80027e0 <WIZCHIP_READ>
 80031e6:	4603      	mov	r3, r0
 80031e8:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	2b17      	cmp	r3, #23
 80031ee:	d009      	beq.n	8003204 <send+0x160>
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b1c      	cmp	r3, #28
 80031f4:	d006      	beq.n	8003204 <send+0x160>
      {
         close(sn);
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fe09 	bl	8002e10 <close>
         return SOCKERR_SOCKSTATUS;
 80031fe:	f06f 0306 	mvn.w	r3, #6
 8003202:	e040      	b.n	8003286 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003204:	4b23      	ldr	r3, [pc, #140]	; (8003294 <send+0x1f0>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	fa42 f303 	asr.w	r3, r2, r3
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <send+0x180>
 8003218:	88ba      	ldrh	r2, [r7, #4]
 800321a:	89bb      	ldrh	r3, [r7, #12]
 800321c:	429a      	cmp	r2, r3
 800321e:	d901      	bls.n	8003224 <send+0x180>
 8003220:	2300      	movs	r3, #0
 8003222:	e030      	b.n	8003286 <send+0x1e2>
      if(len <= freesize) break;
 8003224:	88ba      	ldrh	r2, [r7, #4]
 8003226:	89bb      	ldrh	r3, [r7, #12]
 8003228:	429a      	cmp	r2, r3
 800322a:	d900      	bls.n	800322e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800322c:	e7cc      	b.n	80031c8 <send+0x124>
      if(len <= freesize) break;
 800322e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003230:	88ba      	ldrh	r2, [r7, #4]
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	6839      	ldr	r1, [r7, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fc77 	bl	8002b2a <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	3301      	adds	r3, #1
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003248:	2120      	movs	r1, #32
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fb14 	bl	8002878 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8003250:	bf00      	nop
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	3301      	adds	r3, #1
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fabe 	bl	80027e0 <WIZCHIP_READ>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f3      	bne.n	8003252 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	2201      	movs	r2, #1
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	b21a      	sxth	r2, r3
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <send+0x1ec>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b21b      	sxth	r3, r3
 800327a:	4313      	orrs	r3, r2
 800327c:	b21b      	sxth	r3, r3
 800327e:	b29a      	uxth	r2, r3
 8003280:	4b03      	ldr	r3, [pc, #12]	; (8003290 <send+0x1ec>)
 8003282:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003284:	88bb      	ldrh	r3, [r7, #4]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	2000011e 	.word	0x2000011e
 8003294:	2000011c 	.word	0x2000011c

08003298 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	bf00      	nop
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	70fb      	strb	r3, [r7, #3]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
 800330c:	2300      	movs	r3, #0
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	807b      	strh	r3, [r7, #2]
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	807b      	strh	r3, [r7, #2]
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <reg_wizchip_cs_cbfunc+0x16>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <reg_wizchip_cs_cbfunc+0x40>)
 8003378:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <reg_wizchip_cs_cbfunc+0x44>)
 800337a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <reg_wizchip_cs_cbfunc+0x40>)
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <reg_wizchip_cs_cbfunc+0x48>)
 8003380:	619a      	str	r2, [r3, #24]
 8003382:	e006      	b.n	8003392 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003384:	4a06      	ldr	r2, [pc, #24]	; (80033a0 <reg_wizchip_cs_cbfunc+0x40>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800338a:	4a05      	ldr	r2, [pc, #20]	; (80033a0 <reg_wizchip_cs_cbfunc+0x40>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6193      	str	r3, [r2, #24]
   }
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000010 	.word	0x20000010
 80033a4:	080032b5 	.word	0x080032b5
 80033a8:	080032c3 	.word	0x080032c3

080033ac <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80033b6:	bf00      	nop
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f9      	beq.n	80033b8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <reg_wizchip_spi_cbfunc+0x24>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d106      	bne.n	80033de <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <reg_wizchip_spi_cbfunc+0x50>)
 80033d4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80033d6:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80033d8:	4a09      	ldr	r2, [pc, #36]	; (8003400 <reg_wizchip_spi_cbfunc+0x54>)
 80033da:	621a      	str	r2, [r3, #32]
 80033dc:	e006      	b.n	80033ec <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80033de:	4a06      	ldr	r2, [pc, #24]	; (80033f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80033e4:	4a04      	ldr	r2, [pc, #16]	; (80033f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6213      	str	r3, [r2, #32]
   }
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	20000010 	.word	0x20000010
 80033fc:	08003309 	.word	0x08003309
 8003400:	08003319 	.word	0x08003319

08003404 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800340e:	bf00      	nop
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f9      	beq.n	8003410 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <reg_wizchip_spiburst_cbfunc+0x24>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d106      	bne.n	8003436 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800342a:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <reg_wizchip_spiburst_cbfunc+0x50>)
 800342c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003430:	4a09      	ldr	r2, [pc, #36]	; (8003458 <reg_wizchip_spiburst_cbfunc+0x54>)
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
 8003434:	e006      	b.n	8003444 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003436:	4a06      	ldr	r2, [pc, #24]	; (8003450 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800343c:	4a04      	ldr	r2, [pc, #16]	; (8003450 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8003442:	bf00      	nop
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	20000010 	.word	0x20000010
 8003454:	0800332f 	.word	0x0800332f
 8003458:	08003347 	.word	0x08003347

0800345c <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	6039      	str	r1, [r7, #0]
 8003466:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	2300      	movs	r3, #0
 8003472:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	f200 80c7 	bhi.w	800360a <ctlwizchip+0x1ae>
 800347c:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <ctlwizchip+0x28>)
 800347e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003482:	bf00      	nop
 8003484:	080034c5 	.word	0x080034c5
 8003488:	080034cb 	.word	0x080034cb
 800348c:	080034f7 	.word	0x080034f7
 8003490:	080034eb 	.word	0x080034eb
 8003494:	08003505 	.word	0x08003505
 8003498:	08003511 	.word	0x08003511
 800349c:	0800351f 	.word	0x0800351f
 80034a0:	08003545 	.word	0x08003545
 80034a4:	0800356b 	.word	0x0800356b
 80034a8:	080035af 	.word	0x080035af
 80034ac:	080035b5 	.word	0x080035b5
 80034b0:	080035bd 	.word	0x080035bd
 80034b4:	08003611 	.word	0x08003611
 80034b8:	080035c5 	.word	0x080035c5
 80034bc:	080035d3 	.word	0x080035d3
 80034c0:	080035ef 	.word	0x080035ef
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80034c4:	f000 f8ea 	bl	800369c <wizchip_sw_reset>
         break;
 80034c8:	e0a3      	b.n	8003612 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d004      	beq.n	80034da <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3308      	adds	r3, #8
 80034d8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f927 	bl	8003734 <wizchip_init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	e094      	b.n	8003614 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f9ac 	bl	800384c <wizchip_clrinterrupt>
         break;
 80034f4:	e08d      	b.n	8003612 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80034f6:	f000 f9dd 	bl	80038b4 <wizchip_getinterrupt>
 80034fa:	4603      	mov	r3, r0
 80034fc:	461a      	mov	r2, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	801a      	strh	r2, [r3, #0]
         break;
 8003502:	e086      	b.n	8003612 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 f9f8 	bl	80038fe <wizchip_setinterruptmask>
         break;         
 800350e:	e080      	b.n	8003612 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003510:	f000 fa10 	bl	8003934 <wizchip_getinterruptmask>
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	801a      	strh	r2, [r3, #0]
         break;
 800351c:	e079      	b.n	8003612 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	b29b      	uxth	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	4619      	mov	r1, r3
 800352a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800352e:	f7ff f9a3 	bl	8002878 <WIZCHIP_WRITE>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	4619      	mov	r1, r3
 800353a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800353e:	f7ff f99b 	bl	8002878 <WIZCHIP_WRITE>
         break;
 8003542:	e066      	b.n	8003612 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003544:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003548:	f7ff f94a 	bl	80027e0 <WIZCHIP_READ>
 800354c:	4603      	mov	r3, r0
 800354e:	b29b      	uxth	r3, r3
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	b29c      	uxth	r4, r3
 8003554:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003558:	f7ff f942 	bl	80027e0 <WIZCHIP_READ>
 800355c:	4603      	mov	r3, r0
 800355e:	b29b      	uxth	r3, r3
 8003560:	4423      	add	r3, r4
 8003562:	b29a      	uxth	r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	801a      	strh	r2, [r3, #0]
         break;
 8003568:	e053      	b.n	8003612 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800356a:	4b2c      	ldr	r3, [pc, #176]	; (800361c <ctlwizchip+0x1c0>)
 800356c:	789a      	ldrb	r2, [r3, #2]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	4a29      	ldr	r2, [pc, #164]	; (800361c <ctlwizchip+0x1c0>)
 8003578:	78d2      	ldrb	r2, [r2, #3]
 800357a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	3302      	adds	r3, #2
 8003580:	4a26      	ldr	r2, [pc, #152]	; (800361c <ctlwizchip+0x1c0>)
 8003582:	7912      	ldrb	r2, [r2, #4]
 8003584:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	3303      	adds	r3, #3
 800358a:	4a24      	ldr	r2, [pc, #144]	; (800361c <ctlwizchip+0x1c0>)
 800358c:	7952      	ldrb	r2, [r2, #5]
 800358e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	3304      	adds	r3, #4
 8003594:	4a21      	ldr	r2, [pc, #132]	; (800361c <ctlwizchip+0x1c0>)
 8003596:	7992      	ldrb	r2, [r2, #6]
 8003598:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	3305      	adds	r3, #5
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <ctlwizchip+0x1c0>)
 80035a0:	79d2      	ldrb	r2, [r2, #7]
 80035a2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	3306      	adds	r3, #6
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
         break;
 80035ac:	e031      	b.n	8003612 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80035ae:	f000 fa13 	bl	80039d8 <wizphy_reset>
         break;
 80035b2:	e02e      	b.n	8003612 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80035b4:	6838      	ldr	r0, [r7, #0]
 80035b6:	f000 fa36 	bl	8003a26 <wizphy_setphyconf>
         break;
 80035ba:	e02a      	b.n	8003612 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80035bc:	6838      	ldr	r0, [r7, #0]
 80035be:	f000 fa74 	bl	8003aaa <wizphy_getphyconf>
         break;
 80035c2:	e026      	b.n	8003612 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fad7 	bl	8003b7c <wizphy_setphypmode>
 80035ce:	4603      	mov	r3, r0
 80035d0:	e020      	b.n	8003614 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80035d2:	f000 f9e8 	bl	80039a6 <wizphy_getphypmode>
 80035d6:	4603      	mov	r3, r0
 80035d8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2bff      	cmp	r3, #255	; 0xff
 80035de:	d102      	bne.n	80035e6 <ctlwizchip+0x18a>
 80035e0:	f04f 33ff 	mov.w	r3, #4294967295
 80035e4:	e016      	b.n	8003614 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	7dfa      	ldrb	r2, [r7, #23]
 80035ea:	701a      	strb	r2, [r3, #0]
         break;
 80035ec:	e011      	b.n	8003612 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80035ee:	f000 f9c4 	bl	800397a <wizphy_getphylink>
 80035f2:	4603      	mov	r3, r0
 80035f4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
 80035f8:	2bff      	cmp	r3, #255	; 0xff
 80035fa:	d102      	bne.n	8003602 <ctlwizchip+0x1a6>
 80035fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003600:	e008      	b.n	8003614 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	7dfa      	ldrb	r2, [r7, #23]
 8003606:	701a      	strb	r2, [r3, #0]
         break;
 8003608:	e003      	b.n	8003612 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 800360a:	f04f 33ff 	mov.w	r3, #4294967295
 800360e:	e001      	b.n	8003614 <ctlwizchip+0x1b8>
         break;
 8003610:	bf00      	nop
   }
   return 0;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	bd90      	pop	{r4, r7, pc}
 800361c:	20000010 	.word	0x20000010

08003620 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	2b05      	cmp	r3, #5
 8003630:	d82c      	bhi.n	800368c <ctlnetwork+0x6c>
 8003632:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <ctlnetwork+0x18>)
 8003634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003638:	08003651 	.word	0x08003651
 800363c:	08003659 	.word	0x08003659
 8003640:	08003661 	.word	0x08003661
 8003644:	0800366f 	.word	0x0800366f
 8003648:	0800367d 	.word	0x0800367d
 800364c:	08003685 	.word	0x08003685
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003650:	6838      	ldr	r0, [r7, #0]
 8003652:	f000 fadd 	bl	8003c10 <wizchip_setnetinfo>
         break;
 8003656:	e01c      	b.n	8003692 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003658:	6838      	ldr	r0, [r7, #0]
 800365a:	f000 fb19 	bl	8003c90 <wizchip_getnetinfo>
         break;
 800365e:	e018      	b.n	8003692 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fb53 	bl	8003d10 <wizchip_setnetmode>
 800366a:	4603      	mov	r3, r0
 800366c:	e012      	b.n	8003694 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800366e:	f000 fb71 	bl	8003d54 <wizchip_getnetmode>
 8003672:	4603      	mov	r3, r0
 8003674:	461a      	mov	r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	701a      	strb	r2, [r3, #0]
         break;
 800367a:	e00a      	b.n	8003692 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800367c:	6838      	ldr	r0, [r7, #0]
 800367e:	f000 fb71 	bl	8003d64 <wizchip_settimeout>
         break;
 8003682:	e006      	b.n	8003692 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003684:	6838      	ldr	r0, [r7, #0]
 8003686:	f000 fb8e 	bl	8003da6 <wizchip_gettimeout>
         break;
 800368a:	e002      	b.n	8003692 <ctlnetwork+0x72>
      default:
         return -1;
 800368c:	f04f 33ff 	mov.w	r3, #4294967295
 8003690:	e000      	b.n	8003694 <ctlnetwork+0x74>
   }
   return 0;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80036a2:	1d3b      	adds	r3, r7, #4
 80036a4:	2206      	movs	r2, #6
 80036a6:	4619      	mov	r1, r3
 80036a8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80036ac:	f7ff f932 	bl	8002914 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	2204      	movs	r2, #4
 80036b6:	4619      	mov	r1, r3
 80036b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80036bc:	f7ff f92a 	bl	8002914 <WIZCHIP_READ_BUF>
 80036c0:	f107 0310 	add.w	r3, r7, #16
 80036c4:	2204      	movs	r2, #4
 80036c6:	4619      	mov	r1, r3
 80036c8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80036cc:	f7ff f922 	bl	8002914 <WIZCHIP_READ_BUF>
 80036d0:	f107 030c 	add.w	r3, r7, #12
 80036d4:	2204      	movs	r2, #4
 80036d6:	4619      	mov	r1, r3
 80036d8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80036dc:	f7ff f91a 	bl	8002914 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	2000      	movs	r0, #0
 80036e4:	f7ff f8c8 	bl	8002878 <WIZCHIP_WRITE>
   getMR(); // for delay
 80036e8:	2000      	movs	r0, #0
 80036ea:	f7ff f879 	bl	80027e0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80036ee:	1d3b      	adds	r3, r7, #4
 80036f0:	2206      	movs	r2, #6
 80036f2:	4619      	mov	r1, r3
 80036f4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80036f8:	f7ff f96c 	bl	80029d4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	2204      	movs	r2, #4
 8003702:	4619      	mov	r1, r3
 8003704:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003708:	f7ff f964 	bl	80029d4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800370c:	f107 0310 	add.w	r3, r7, #16
 8003710:	2204      	movs	r2, #4
 8003712:	4619      	mov	r1, r3
 8003714:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003718:	f7ff f95c 	bl	80029d4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800371c:	f107 030c 	add.w	r3, r7, #12
 8003720:	2204      	movs	r2, #4
 8003722:	4619      	mov	r1, r3
 8003724:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003728:	f7ff f954 	bl	80029d4 <WIZCHIP_WRITE_BUF>
}
 800372c:	bf00      	nop
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003742:	f7ff ffab 	bl	800369c <wizchip_sw_reset>
   if(txsize)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d03b      	beq.n	80037c4 <wizchip_init+0x90>
   {
      tmp = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003750:	2300      	movs	r3, #0
 8003752:	73fb      	strb	r3, [r7, #15]
 8003754:	e015      	b.n	8003782 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	781a      	ldrb	r2, [r3, #0]
 8003760:	7bbb      	ldrb	r3, [r7, #14]
 8003762:	4413      	add	r3, r2
 8003764:	b2db      	uxtb	r3, r3
 8003766:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800376c:	2b10      	cmp	r3, #16
 800376e:	dd02      	ble.n	8003776 <wizchip_init+0x42>
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	e066      	b.n	8003844 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	3301      	adds	r3, #1
 800377e:	b2db      	uxtb	r3, r3
 8003780:	73fb      	strb	r3, [r7, #15]
 8003782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003786:	2b07      	cmp	r3, #7
 8003788:	dde5      	ble.n	8003756 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	e015      	b.n	80037bc <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	3301      	adds	r3, #1
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800379e:	4618      	mov	r0, r3
 80037a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	4413      	add	r3, r2
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	4619      	mov	r1, r3
 80037ac:	f7ff f864 	bl	8002878 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	3301      	adds	r3, #1
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	73fb      	strb	r3, [r7, #15]
 80037bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c0:	2b07      	cmp	r3, #7
 80037c2:	dde5      	ble.n	8003790 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d03b      	beq.n	8003842 <wizchip_init+0x10e>
   {
      tmp = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	e015      	b.n	8003800 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80037d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	4413      	add	r3, r2
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	7bbb      	ldrb	r3, [r7, #14]
 80037e0:	4413      	add	r3, r2
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80037e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037ea:	2b10      	cmp	r3, #16
 80037ec:	dd02      	ble.n	80037f4 <wizchip_init+0xc0>
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
 80037f2:	e027      	b.n	8003844 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	73fb      	strb	r3, [r7, #15]
 8003800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003804:	2b07      	cmp	r3, #7
 8003806:	dde5      	ble.n	80037d4 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003808:	2300      	movs	r3, #0
 800380a:	73fb      	strb	r3, [r7, #15]
 800380c:	e015      	b.n	800383a <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800380e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	3301      	adds	r3, #1
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800381c:	4618      	mov	r0, r3
 800381e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4413      	add	r3, r2
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	4619      	mov	r1, r3
 800382a:	f7ff f825 	bl	8002878 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800382e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	3301      	adds	r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	73fb      	strb	r3, [r7, #15]
 800383a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383e:	2b07      	cmp	r3, #7
 8003840:	dde5      	ble.n	800380e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	b29b      	uxth	r3, r3
 8003860:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	f023 030f 	bic.w	r3, r3, #15
 8003868:	b2db      	uxtb	r3, r3
 800386a:	4619      	mov	r1, r3
 800386c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003870:	f7ff f802 	bl	8002878 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e014      	b.n	80038a4 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800387a:	7bba      	ldrb	r2, [r7, #14]
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	fa42 f303 	asr.w	r3, r2, r3
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <wizchip_clrinterrupt+0x52>
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	3301      	adds	r3, #1
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003896:	211f      	movs	r1, #31
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe ffed 	bl	8002878 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	3301      	adds	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b07      	cmp	r3, #7
 80038a8:	d9e7      	bls.n	800387a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80038c6:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80038ca:	f7fe ff89 	bl	80027e0 <WIZCHIP_READ>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f023 030f 	bic.w	r3, r3, #15
 80038d4:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80038d6:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80038da:	f7fe ff81 	bl	80027e0 <WIZCHIP_READ>
 80038de:	4603      	mov	r3, r0
 80038e0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80038e2:	79bb      	ldrb	r3, [r7, #6]
 80038e4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80038e6:	88bb      	ldrh	r3, [r7, #4]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80038f4:	88bb      	ldrh	r3, [r7, #4]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	4603      	mov	r3, r0
 8003906:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	b29b      	uxth	r3, r3
 8003912:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	4619      	mov	r1, r3
 8003918:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800391c:	f7fe ffac 	bl	8002878 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003920:	7bbb      	ldrb	r3, [r7, #14]
 8003922:	4619      	mov	r1, r3
 8003924:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003928:	f7fe ffa6 	bl	8002878 <WIZCHIP_WRITE>
#endif   
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003946:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800394a:	f7fe ff49 	bl	80027e0 <WIZCHIP_READ>
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003952:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003956:	f7fe ff43 	bl	80027e0 <WIZCHIP_READ>
 800395a:	4603      	mov	r3, r0
 800395c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800395e:	79bb      	ldrb	r3, [r7, #6]
 8003960:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003962:	88bb      	ldrh	r3, [r7, #4]
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	b29a      	uxth	r2, r3
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	b29b      	uxth	r3, r3
 800396c:	4413      	add	r3, r2
 800396e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003970:	88bb      	ldrh	r3, [r7, #4]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003980:	2300      	movs	r3, #0
 8003982:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003984:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003988:	f7fe ff2a 	bl	80027e0 <WIZCHIP_READ>
 800398c:	4603      	mov	r3, r0
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8003996:	2301      	movs	r3, #1
 8003998:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80039b0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039b4:	f7fe ff14 	bl	80027e0 <WIZCHIP_READ>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039be:	2b30      	cmp	r3, #48	; 0x30
 80039c0:	d102      	bne.n	80039c8 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80039c2:	2301      	movs	r3, #1
 80039c4:	71fb      	strb	r3, [r7, #7]
 80039c6:	e001      	b.n	80039cc <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80039c8:	2300      	movs	r3, #0
 80039ca:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80039cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80039de:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039e2:	f7fe fefd 	bl	80027e0 <WIZCHIP_READ>
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	4619      	mov	r1, r3
 80039f6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039fa:	f7fe ff3d 	bl	8002878 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80039fe:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003a02:	f7fe feed 	bl	80027e0 <WIZCHIP_READ>
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a10:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	4619      	mov	r1, r3
 8003a16:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003a1a:	f7fe ff2d 	bl	8002878 <WIZCHIP_WRITE>
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d104      	bne.n	8003a44 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	e003      	b.n	8003a4c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a4a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d104      	bne.n	8003a5e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e019      	b.n	8003a92 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	78db      	ldrb	r3, [r3, #3]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d10d      	bne.n	8003a82 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	789b      	ldrb	r3, [r3, #2]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d104      	bne.n	8003a78 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	f043 0318 	orr.w	r3, r3, #24
 8003a74:	73fb      	strb	r3, [r7, #15]
 8003a76:	e00c      	b.n	8003a92 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	f043 0308 	orr.w	r3, r3, #8
 8003a7e:	73fb      	strb	r3, [r7, #15]
 8003a80:	e007      	b.n	8003a92 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	789b      	ldrb	r3, [r3, #2]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d103      	bne.n	8003a92 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	f043 0310 	orr.w	r3, r3, #16
 8003a90:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	4619      	mov	r1, r3
 8003a96:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003a9a:	f7fe feed 	bl	8002878 <WIZCHIP_WRITE>
   wizphy_reset();
 8003a9e:	f7ff ff9b 	bl	80039d8 <wizphy_reset>
}
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003ab6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003aba:	f7fe fe91 	bl	80027e0 <WIZCHIP_READ>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	119b      	asrs	r3, r3, #6
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d001      	beq.n	8003ae0 <wizphy_getphyconf+0x36>
 8003adc:	2b38      	cmp	r3, #56	; 0x38
 8003ade:	d103      	bne.n	8003ae8 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	705a      	strb	r2, [r3, #1]
         break;
 8003ae6:	e003      	b.n	8003af0 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	705a      	strb	r2, [r3, #1]
         break;
 8003aee:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af6:	3b10      	subs	r3, #16
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	bf8c      	ite	hi
 8003afc:	2201      	movhi	r2, #1
 8003afe:	2200      	movls	r2, #0
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	2a00      	cmp	r2, #0
 8003b04:	d111      	bne.n	8003b2a <wizphy_getphyconf+0x80>
 8003b06:	2201      	movs	r2, #1
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8003b10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	709a      	strb	r2, [r3, #2]
         break;
 8003b28:	e003      	b.n	8003b32 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	709a      	strb	r2, [r3, #2]
         break;
 8003b30:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b38:	3b08      	subs	r3, #8
 8003b3a:	2b18      	cmp	r3, #24
 8003b3c:	bf8c      	ite	hi
 8003b3e:	2201      	movhi	r2, #1
 8003b40:	2200      	movls	r2, #0
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	2a00      	cmp	r2, #0
 8003b46:	d111      	bne.n	8003b6c <wizphy_getphyconf+0xc2>
 8003b48:	2201      	movs	r2, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8003b52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bf14      	ite	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	2300      	moveq	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	70da      	strb	r2, [r3, #3]
         break;
 8003b6a:	e003      	b.n	8003b74 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	70da      	strb	r2, [r3, #3]
         break;
 8003b72:	bf00      	nop
   }
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003b8a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003b8e:	f7fe fe27 	bl	80027e0 <WIZCHIP_READ>
 8003b92:	4603      	mov	r3, r0
 8003b94:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <wizphy_setphypmode+0x2a>
 8003ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba4:	e030      	b.n	8003c08 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003bac:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d104      	bne.n	8003bbe <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003bba:	73fb      	strb	r3, [r7, #15]
 8003bbc:	e003      	b.n	8003bc6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003bc4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003bce:	f7fe fe53 	bl	8002878 <WIZCHIP_WRITE>
   wizphy_reset();
 8003bd2:	f7ff ff01 	bl	80039d8 <wizphy_reset>
   tmp = getPHYCFGR();
 8003bd6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003bda:	f7fe fe01 	bl	80027e0 <WIZCHIP_READ>
 8003bde:	4603      	mov	r3, r0
 8003be0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d106      	bne.n	8003bf6 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <wizphy_setphypmode+0x88>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e008      	b.n	8003c08 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <wizphy_setphypmode+0x88>
 8003c00:	2300      	movs	r3, #0
 8003c02:	e001      	b.n	8003c08 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2206      	movs	r2, #6
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003c22:	f7fe fed7 	bl	80029d4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	330e      	adds	r3, #14
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c32:	f7fe fecf 	bl	80029d4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	330a      	adds	r3, #10
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003c42:	f7fe fec7 	bl	80029d4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3306      	adds	r3, #6
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003c52:	f7fe febf 	bl	80029d4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	7c9a      	ldrb	r2, [r3, #18]
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <wizchip_setnetinfo+0x78>)
 8003c5c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	7cda      	ldrb	r2, [r3, #19]
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <wizchip_setnetinfo+0x78>)
 8003c64:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	7d1a      	ldrb	r2, [r3, #20]
 8003c6a:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <wizchip_setnetinfo+0x78>)
 8003c6c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	7d5a      	ldrb	r2, [r3, #21]
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <wizchip_setnetinfo+0x78>)
 8003c74:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	7d9a      	ldrb	r2, [r3, #22]
 8003c7a:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <wizchip_setnetinfo+0x7c>)
 8003c7c:	701a      	strb	r2, [r3, #0]
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000138 	.word	0x20000138
 8003c8c:	2000013c 	.word	0x2000013c

08003c90 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2206      	movs	r2, #6
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003ca2:	f7fe fe37 	bl	8002914 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	330e      	adds	r3, #14
 8003caa:	2204      	movs	r2, #4
 8003cac:	4619      	mov	r1, r3
 8003cae:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003cb2:	f7fe fe2f 	bl	8002914 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	330a      	adds	r3, #10
 8003cba:	2204      	movs	r2, #4
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003cc2:	f7fe fe27 	bl	8002914 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3306      	adds	r3, #6
 8003cca:	2204      	movs	r2, #4
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003cd2:	f7fe fe1f 	bl	8002914 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <wizchip_getnetinfo+0x78>)
 8003cd8:	781a      	ldrb	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <wizchip_getnetinfo+0x78>)
 8003ce0:	785a      	ldrb	r2, [r3, #1]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003ce6:	4b08      	ldr	r3, [pc, #32]	; (8003d08 <wizchip_getnetinfo+0x78>)
 8003ce8:	789a      	ldrb	r2, [r3, #2]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <wizchip_getnetinfo+0x78>)
 8003cf0:	78da      	ldrb	r2, [r3, #3]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <wizchip_getnetinfo+0x7c>)
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	759a      	strb	r2, [r3, #22]
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000138 	.word	0x20000138
 8003d0c:	2000013c 	.word	0x2000013c

08003d10 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <wizchip_setnetmode+0x1e>
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	e00e      	b.n	8003d4c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f7fe fd56 	bl	80027e0 <WIZCHIP_READ>
 8003d34:	4603      	mov	r3, r0
 8003d36:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	4619      	mov	r1, r3
 8003d44:	2000      	movs	r0, #0
 8003d46:	f7fe fd97 	bl	8002878 <WIZCHIP_WRITE>
   return 0;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f7fe fd41 	bl	80027e0 <WIZCHIP_READ>
 8003d5e:	4603      	mov	r3, r0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	4619      	mov	r1, r3
 8003d72:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003d76:	f7fe fd7f 	bl	8002878 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	885b      	ldrh	r3, [r3, #2]
 8003d7e:	0a1b      	lsrs	r3, r3, #8
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	4619      	mov	r1, r3
 8003d86:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003d8a:	f7fe fd75 	bl	8002878 <WIZCHIP_WRITE>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	885b      	ldrh	r3, [r3, #2]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	4619      	mov	r1, r3
 8003d96:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003d9a:	f7fe fd6d 	bl	8002878 <WIZCHIP_WRITE>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003da6:	b590      	push	{r4, r7, lr}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8003dae:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003db2:	f7fe fd15 	bl	80027e0 <WIZCHIP_READ>
 8003db6:	4603      	mov	r3, r0
 8003db8:	461a      	mov	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8003dbe:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003dc2:	f7fe fd0d 	bl	80027e0 <WIZCHIP_READ>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	b29c      	uxth	r4, r3
 8003dce:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003dd2:	f7fe fd05 	bl	80027e0 <WIZCHIP_READ>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	4423      	add	r3, r4
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	805a      	strh	r2, [r3, #2]
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd90      	pop	{r4, r7, pc}
	...

08003dec <__errno>:
 8003dec:	4b01      	ldr	r3, [pc, #4]	; (8003df4 <__errno+0x8>)
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	2000003c 	.word	0x2000003c

08003df8 <__libc_init_array>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	4d0d      	ldr	r5, [pc, #52]	; (8003e30 <__libc_init_array+0x38>)
 8003dfc:	4c0d      	ldr	r4, [pc, #52]	; (8003e34 <__libc_init_array+0x3c>)
 8003dfe:	1b64      	subs	r4, r4, r5
 8003e00:	10a4      	asrs	r4, r4, #2
 8003e02:	2600      	movs	r6, #0
 8003e04:	42a6      	cmp	r6, r4
 8003e06:	d109      	bne.n	8003e1c <__libc_init_array+0x24>
 8003e08:	4d0b      	ldr	r5, [pc, #44]	; (8003e38 <__libc_init_array+0x40>)
 8003e0a:	4c0c      	ldr	r4, [pc, #48]	; (8003e3c <__libc_init_array+0x44>)
 8003e0c:	f001 f834 	bl	8004e78 <_init>
 8003e10:	1b64      	subs	r4, r4, r5
 8003e12:	10a4      	asrs	r4, r4, #2
 8003e14:	2600      	movs	r6, #0
 8003e16:	42a6      	cmp	r6, r4
 8003e18:	d105      	bne.n	8003e26 <__libc_init_array+0x2e>
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e20:	4798      	blx	r3
 8003e22:	3601      	adds	r6, #1
 8003e24:	e7ee      	b.n	8003e04 <__libc_init_array+0xc>
 8003e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2a:	4798      	blx	r3
 8003e2c:	3601      	adds	r6, #1
 8003e2e:	e7f2      	b.n	8003e16 <__libc_init_array+0x1e>
 8003e30:	08005084 	.word	0x08005084
 8003e34:	08005084 	.word	0x08005084
 8003e38:	08005084 	.word	0x08005084
 8003e3c:	08005088 	.word	0x08005088

08003e40 <malloc>:
 8003e40:	4b02      	ldr	r3, [pc, #8]	; (8003e4c <malloc+0xc>)
 8003e42:	4601      	mov	r1, r0
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	f000 b87f 	b.w	8003f48 <_malloc_r>
 8003e4a:	bf00      	nop
 8003e4c:	2000003c 	.word	0x2000003c

08003e50 <free>:
 8003e50:	4b02      	ldr	r3, [pc, #8]	; (8003e5c <free+0xc>)
 8003e52:	4601      	mov	r1, r0
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	f000 b80b 	b.w	8003e70 <_free_r>
 8003e5a:	bf00      	nop
 8003e5c:	2000003c 	.word	0x2000003c

08003e60 <memset>:
 8003e60:	4402      	add	r2, r0
 8003e62:	4603      	mov	r3, r0
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d100      	bne.n	8003e6a <memset+0xa>
 8003e68:	4770      	bx	lr
 8003e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6e:	e7f9      	b.n	8003e64 <memset+0x4>

08003e70 <_free_r>:
 8003e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e72:	2900      	cmp	r1, #0
 8003e74:	d044      	beq.n	8003f00 <_free_r+0x90>
 8003e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e7a:	9001      	str	r0, [sp, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8003e82:	bfb8      	it	lt
 8003e84:	18e4      	addlt	r4, r4, r3
 8003e86:	f000 fc51 	bl	800472c <__malloc_lock>
 8003e8a:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <_free_r+0x94>)
 8003e8c:	9801      	ldr	r0, [sp, #4]
 8003e8e:	6813      	ldr	r3, [r2, #0]
 8003e90:	b933      	cbnz	r3, 8003ea0 <_free_r+0x30>
 8003e92:	6063      	str	r3, [r4, #4]
 8003e94:	6014      	str	r4, [r2, #0]
 8003e96:	b003      	add	sp, #12
 8003e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e9c:	f000 bc4c 	b.w	8004738 <__malloc_unlock>
 8003ea0:	42a3      	cmp	r3, r4
 8003ea2:	d908      	bls.n	8003eb6 <_free_r+0x46>
 8003ea4:	6825      	ldr	r5, [r4, #0]
 8003ea6:	1961      	adds	r1, r4, r5
 8003ea8:	428b      	cmp	r3, r1
 8003eaa:	bf01      	itttt	eq
 8003eac:	6819      	ldreq	r1, [r3, #0]
 8003eae:	685b      	ldreq	r3, [r3, #4]
 8003eb0:	1949      	addeq	r1, r1, r5
 8003eb2:	6021      	streq	r1, [r4, #0]
 8003eb4:	e7ed      	b.n	8003e92 <_free_r+0x22>
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	b10b      	cbz	r3, 8003ec0 <_free_r+0x50>
 8003ebc:	42a3      	cmp	r3, r4
 8003ebe:	d9fa      	bls.n	8003eb6 <_free_r+0x46>
 8003ec0:	6811      	ldr	r1, [r2, #0]
 8003ec2:	1855      	adds	r5, r2, r1
 8003ec4:	42a5      	cmp	r5, r4
 8003ec6:	d10b      	bne.n	8003ee0 <_free_r+0x70>
 8003ec8:	6824      	ldr	r4, [r4, #0]
 8003eca:	4421      	add	r1, r4
 8003ecc:	1854      	adds	r4, r2, r1
 8003ece:	42a3      	cmp	r3, r4
 8003ed0:	6011      	str	r1, [r2, #0]
 8003ed2:	d1e0      	bne.n	8003e96 <_free_r+0x26>
 8003ed4:	681c      	ldr	r4, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	6053      	str	r3, [r2, #4]
 8003eda:	4421      	add	r1, r4
 8003edc:	6011      	str	r1, [r2, #0]
 8003ede:	e7da      	b.n	8003e96 <_free_r+0x26>
 8003ee0:	d902      	bls.n	8003ee8 <_free_r+0x78>
 8003ee2:	230c      	movs	r3, #12
 8003ee4:	6003      	str	r3, [r0, #0]
 8003ee6:	e7d6      	b.n	8003e96 <_free_r+0x26>
 8003ee8:	6825      	ldr	r5, [r4, #0]
 8003eea:	1961      	adds	r1, r4, r5
 8003eec:	428b      	cmp	r3, r1
 8003eee:	bf04      	itt	eq
 8003ef0:	6819      	ldreq	r1, [r3, #0]
 8003ef2:	685b      	ldreq	r3, [r3, #4]
 8003ef4:	6063      	str	r3, [r4, #4]
 8003ef6:	bf04      	itt	eq
 8003ef8:	1949      	addeq	r1, r1, r5
 8003efa:	6021      	streq	r1, [r4, #0]
 8003efc:	6054      	str	r4, [r2, #4]
 8003efe:	e7ca      	b.n	8003e96 <_free_r+0x26>
 8003f00:	b003      	add	sp, #12
 8003f02:	bd30      	pop	{r4, r5, pc}
 8003f04:	20000140 	.word	0x20000140

08003f08 <sbrk_aligned>:
 8003f08:	b570      	push	{r4, r5, r6, lr}
 8003f0a:	4e0e      	ldr	r6, [pc, #56]	; (8003f44 <sbrk_aligned+0x3c>)
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	6831      	ldr	r1, [r6, #0]
 8003f10:	4605      	mov	r5, r0
 8003f12:	b911      	cbnz	r1, 8003f1a <sbrk_aligned+0x12>
 8003f14:	f000 f91a 	bl	800414c <_sbrk_r>
 8003f18:	6030      	str	r0, [r6, #0]
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	f000 f915 	bl	800414c <_sbrk_r>
 8003f22:	1c43      	adds	r3, r0, #1
 8003f24:	d00a      	beq.n	8003f3c <sbrk_aligned+0x34>
 8003f26:	1cc4      	adds	r4, r0, #3
 8003f28:	f024 0403 	bic.w	r4, r4, #3
 8003f2c:	42a0      	cmp	r0, r4
 8003f2e:	d007      	beq.n	8003f40 <sbrk_aligned+0x38>
 8003f30:	1a21      	subs	r1, r4, r0
 8003f32:	4628      	mov	r0, r5
 8003f34:	f000 f90a 	bl	800414c <_sbrk_r>
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d101      	bne.n	8003f40 <sbrk_aligned+0x38>
 8003f3c:	f04f 34ff 	mov.w	r4, #4294967295
 8003f40:	4620      	mov	r0, r4
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	20000144 	.word	0x20000144

08003f48 <_malloc_r>:
 8003f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4c:	1ccd      	adds	r5, r1, #3
 8003f4e:	f025 0503 	bic.w	r5, r5, #3
 8003f52:	3508      	adds	r5, #8
 8003f54:	2d0c      	cmp	r5, #12
 8003f56:	bf38      	it	cc
 8003f58:	250c      	movcc	r5, #12
 8003f5a:	2d00      	cmp	r5, #0
 8003f5c:	4607      	mov	r7, r0
 8003f5e:	db01      	blt.n	8003f64 <_malloc_r+0x1c>
 8003f60:	42a9      	cmp	r1, r5
 8003f62:	d905      	bls.n	8003f70 <_malloc_r+0x28>
 8003f64:	230c      	movs	r3, #12
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	2600      	movs	r6, #0
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f70:	4e2e      	ldr	r6, [pc, #184]	; (800402c <_malloc_r+0xe4>)
 8003f72:	f000 fbdb 	bl	800472c <__malloc_lock>
 8003f76:	6833      	ldr	r3, [r6, #0]
 8003f78:	461c      	mov	r4, r3
 8003f7a:	bb34      	cbnz	r4, 8003fca <_malloc_r+0x82>
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	4638      	mov	r0, r7
 8003f80:	f7ff ffc2 	bl	8003f08 <sbrk_aligned>
 8003f84:	1c43      	adds	r3, r0, #1
 8003f86:	4604      	mov	r4, r0
 8003f88:	d14d      	bne.n	8004026 <_malloc_r+0xde>
 8003f8a:	6834      	ldr	r4, [r6, #0]
 8003f8c:	4626      	mov	r6, r4
 8003f8e:	2e00      	cmp	r6, #0
 8003f90:	d140      	bne.n	8004014 <_malloc_r+0xcc>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	4631      	mov	r1, r6
 8003f96:	4638      	mov	r0, r7
 8003f98:	eb04 0803 	add.w	r8, r4, r3
 8003f9c:	f000 f8d6 	bl	800414c <_sbrk_r>
 8003fa0:	4580      	cmp	r8, r0
 8003fa2:	d13a      	bne.n	800401a <_malloc_r+0xd2>
 8003fa4:	6821      	ldr	r1, [r4, #0]
 8003fa6:	3503      	adds	r5, #3
 8003fa8:	1a6d      	subs	r5, r5, r1
 8003faa:	f025 0503 	bic.w	r5, r5, #3
 8003fae:	3508      	adds	r5, #8
 8003fb0:	2d0c      	cmp	r5, #12
 8003fb2:	bf38      	it	cc
 8003fb4:	250c      	movcc	r5, #12
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	4638      	mov	r0, r7
 8003fba:	f7ff ffa5 	bl	8003f08 <sbrk_aligned>
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d02b      	beq.n	800401a <_malloc_r+0xd2>
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	442b      	add	r3, r5
 8003fc6:	6023      	str	r3, [r4, #0]
 8003fc8:	e00e      	b.n	8003fe8 <_malloc_r+0xa0>
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	1b52      	subs	r2, r2, r5
 8003fce:	d41e      	bmi.n	800400e <_malloc_r+0xc6>
 8003fd0:	2a0b      	cmp	r2, #11
 8003fd2:	d916      	bls.n	8004002 <_malloc_r+0xba>
 8003fd4:	1961      	adds	r1, r4, r5
 8003fd6:	42a3      	cmp	r3, r4
 8003fd8:	6025      	str	r5, [r4, #0]
 8003fda:	bf18      	it	ne
 8003fdc:	6059      	strne	r1, [r3, #4]
 8003fde:	6863      	ldr	r3, [r4, #4]
 8003fe0:	bf08      	it	eq
 8003fe2:	6031      	streq	r1, [r6, #0]
 8003fe4:	5162      	str	r2, [r4, r5]
 8003fe6:	604b      	str	r3, [r1, #4]
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f104 060b 	add.w	r6, r4, #11
 8003fee:	f000 fba3 	bl	8004738 <__malloc_unlock>
 8003ff2:	f026 0607 	bic.w	r6, r6, #7
 8003ff6:	1d23      	adds	r3, r4, #4
 8003ff8:	1af2      	subs	r2, r6, r3
 8003ffa:	d0b6      	beq.n	8003f6a <_malloc_r+0x22>
 8003ffc:	1b9b      	subs	r3, r3, r6
 8003ffe:	50a3      	str	r3, [r4, r2]
 8004000:	e7b3      	b.n	8003f6a <_malloc_r+0x22>
 8004002:	6862      	ldr	r2, [r4, #4]
 8004004:	42a3      	cmp	r3, r4
 8004006:	bf0c      	ite	eq
 8004008:	6032      	streq	r2, [r6, #0]
 800400a:	605a      	strne	r2, [r3, #4]
 800400c:	e7ec      	b.n	8003fe8 <_malloc_r+0xa0>
 800400e:	4623      	mov	r3, r4
 8004010:	6864      	ldr	r4, [r4, #4]
 8004012:	e7b2      	b.n	8003f7a <_malloc_r+0x32>
 8004014:	4634      	mov	r4, r6
 8004016:	6876      	ldr	r6, [r6, #4]
 8004018:	e7b9      	b.n	8003f8e <_malloc_r+0x46>
 800401a:	230c      	movs	r3, #12
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4638      	mov	r0, r7
 8004020:	f000 fb8a 	bl	8004738 <__malloc_unlock>
 8004024:	e7a1      	b.n	8003f6a <_malloc_r+0x22>
 8004026:	6025      	str	r5, [r4, #0]
 8004028:	e7de      	b.n	8003fe8 <_malloc_r+0xa0>
 800402a:	bf00      	nop
 800402c:	20000140 	.word	0x20000140

08004030 <iprintf>:
 8004030:	b40f      	push	{r0, r1, r2, r3}
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <iprintf+0x2c>)
 8004034:	b513      	push	{r0, r1, r4, lr}
 8004036:	681c      	ldr	r4, [r3, #0]
 8004038:	b124      	cbz	r4, 8004044 <iprintf+0x14>
 800403a:	69a3      	ldr	r3, [r4, #24]
 800403c:	b913      	cbnz	r3, 8004044 <iprintf+0x14>
 800403e:	4620      	mov	r0, r4
 8004040:	f000 fa6e 	bl	8004520 <__sinit>
 8004044:	ab05      	add	r3, sp, #20
 8004046:	9a04      	ldr	r2, [sp, #16]
 8004048:	68a1      	ldr	r1, [r4, #8]
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	4620      	mov	r0, r4
 800404e:	f000 fba3 	bl	8004798 <_vfiprintf_r>
 8004052:	b002      	add	sp, #8
 8004054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004058:	b004      	add	sp, #16
 800405a:	4770      	bx	lr
 800405c:	2000003c 	.word	0x2000003c

08004060 <_puts_r>:
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	460e      	mov	r6, r1
 8004064:	4605      	mov	r5, r0
 8004066:	b118      	cbz	r0, 8004070 <_puts_r+0x10>
 8004068:	6983      	ldr	r3, [r0, #24]
 800406a:	b90b      	cbnz	r3, 8004070 <_puts_r+0x10>
 800406c:	f000 fa58 	bl	8004520 <__sinit>
 8004070:	69ab      	ldr	r3, [r5, #24]
 8004072:	68ac      	ldr	r4, [r5, #8]
 8004074:	b913      	cbnz	r3, 800407c <_puts_r+0x1c>
 8004076:	4628      	mov	r0, r5
 8004078:	f000 fa52 	bl	8004520 <__sinit>
 800407c:	4b2c      	ldr	r3, [pc, #176]	; (8004130 <_puts_r+0xd0>)
 800407e:	429c      	cmp	r4, r3
 8004080:	d120      	bne.n	80040c4 <_puts_r+0x64>
 8004082:	686c      	ldr	r4, [r5, #4]
 8004084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004086:	07db      	lsls	r3, r3, #31
 8004088:	d405      	bmi.n	8004096 <_puts_r+0x36>
 800408a:	89a3      	ldrh	r3, [r4, #12]
 800408c:	0598      	lsls	r0, r3, #22
 800408e:	d402      	bmi.n	8004096 <_puts_r+0x36>
 8004090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004092:	f000 fae3 	bl	800465c <__retarget_lock_acquire_recursive>
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	0719      	lsls	r1, r3, #28
 800409a:	d51d      	bpl.n	80040d8 <_puts_r+0x78>
 800409c:	6923      	ldr	r3, [r4, #16]
 800409e:	b1db      	cbz	r3, 80040d8 <_puts_r+0x78>
 80040a0:	3e01      	subs	r6, #1
 80040a2:	68a3      	ldr	r3, [r4, #8]
 80040a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040a8:	3b01      	subs	r3, #1
 80040aa:	60a3      	str	r3, [r4, #8]
 80040ac:	bb39      	cbnz	r1, 80040fe <_puts_r+0x9e>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	da38      	bge.n	8004124 <_puts_r+0xc4>
 80040b2:	4622      	mov	r2, r4
 80040b4:	210a      	movs	r1, #10
 80040b6:	4628      	mov	r0, r5
 80040b8:	f000 f858 	bl	800416c <__swbuf_r>
 80040bc:	3001      	adds	r0, #1
 80040be:	d011      	beq.n	80040e4 <_puts_r+0x84>
 80040c0:	250a      	movs	r5, #10
 80040c2:	e011      	b.n	80040e8 <_puts_r+0x88>
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <_puts_r+0xd4>)
 80040c6:	429c      	cmp	r4, r3
 80040c8:	d101      	bne.n	80040ce <_puts_r+0x6e>
 80040ca:	68ac      	ldr	r4, [r5, #8]
 80040cc:	e7da      	b.n	8004084 <_puts_r+0x24>
 80040ce:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <_puts_r+0xd8>)
 80040d0:	429c      	cmp	r4, r3
 80040d2:	bf08      	it	eq
 80040d4:	68ec      	ldreq	r4, [r5, #12]
 80040d6:	e7d5      	b.n	8004084 <_puts_r+0x24>
 80040d8:	4621      	mov	r1, r4
 80040da:	4628      	mov	r0, r5
 80040dc:	f000 f898 	bl	8004210 <__swsetup_r>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d0dd      	beq.n	80040a0 <_puts_r+0x40>
 80040e4:	f04f 35ff 	mov.w	r5, #4294967295
 80040e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040ea:	07da      	lsls	r2, r3, #31
 80040ec:	d405      	bmi.n	80040fa <_puts_r+0x9a>
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	059b      	lsls	r3, r3, #22
 80040f2:	d402      	bmi.n	80040fa <_puts_r+0x9a>
 80040f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040f6:	f000 fab2 	bl	800465e <__retarget_lock_release_recursive>
 80040fa:	4628      	mov	r0, r5
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
 80040fe:	2b00      	cmp	r3, #0
 8004100:	da04      	bge.n	800410c <_puts_r+0xac>
 8004102:	69a2      	ldr	r2, [r4, #24]
 8004104:	429a      	cmp	r2, r3
 8004106:	dc06      	bgt.n	8004116 <_puts_r+0xb6>
 8004108:	290a      	cmp	r1, #10
 800410a:	d004      	beq.n	8004116 <_puts_r+0xb6>
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	6022      	str	r2, [r4, #0]
 8004112:	7019      	strb	r1, [r3, #0]
 8004114:	e7c5      	b.n	80040a2 <_puts_r+0x42>
 8004116:	4622      	mov	r2, r4
 8004118:	4628      	mov	r0, r5
 800411a:	f000 f827 	bl	800416c <__swbuf_r>
 800411e:	3001      	adds	r0, #1
 8004120:	d1bf      	bne.n	80040a2 <_puts_r+0x42>
 8004122:	e7df      	b.n	80040e4 <_puts_r+0x84>
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	250a      	movs	r5, #10
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	6022      	str	r2, [r4, #0]
 800412c:	701d      	strb	r5, [r3, #0]
 800412e:	e7db      	b.n	80040e8 <_puts_r+0x88>
 8004130:	08005008 	.word	0x08005008
 8004134:	08005028 	.word	0x08005028
 8004138:	08004fe8 	.word	0x08004fe8

0800413c <puts>:
 800413c:	4b02      	ldr	r3, [pc, #8]	; (8004148 <puts+0xc>)
 800413e:	4601      	mov	r1, r0
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	f7ff bf8d 	b.w	8004060 <_puts_r>
 8004146:	bf00      	nop
 8004148:	2000003c 	.word	0x2000003c

0800414c <_sbrk_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	4d06      	ldr	r5, [pc, #24]	; (8004168 <_sbrk_r+0x1c>)
 8004150:	2300      	movs	r3, #0
 8004152:	4604      	mov	r4, r0
 8004154:	4608      	mov	r0, r1
 8004156:	602b      	str	r3, [r5, #0]
 8004158:	f7fc fdc0 	bl	8000cdc <_sbrk>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_sbrk_r+0x1a>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_sbrk_r+0x1a>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	2000014c 	.word	0x2000014c

0800416c <__swbuf_r>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	460e      	mov	r6, r1
 8004170:	4614      	mov	r4, r2
 8004172:	4605      	mov	r5, r0
 8004174:	b118      	cbz	r0, 800417e <__swbuf_r+0x12>
 8004176:	6983      	ldr	r3, [r0, #24]
 8004178:	b90b      	cbnz	r3, 800417e <__swbuf_r+0x12>
 800417a:	f000 f9d1 	bl	8004520 <__sinit>
 800417e:	4b21      	ldr	r3, [pc, #132]	; (8004204 <__swbuf_r+0x98>)
 8004180:	429c      	cmp	r4, r3
 8004182:	d12b      	bne.n	80041dc <__swbuf_r+0x70>
 8004184:	686c      	ldr	r4, [r5, #4]
 8004186:	69a3      	ldr	r3, [r4, #24]
 8004188:	60a3      	str	r3, [r4, #8]
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	071a      	lsls	r2, r3, #28
 800418e:	d52f      	bpl.n	80041f0 <__swbuf_r+0x84>
 8004190:	6923      	ldr	r3, [r4, #16]
 8004192:	b36b      	cbz	r3, 80041f0 <__swbuf_r+0x84>
 8004194:	6923      	ldr	r3, [r4, #16]
 8004196:	6820      	ldr	r0, [r4, #0]
 8004198:	1ac0      	subs	r0, r0, r3
 800419a:	6963      	ldr	r3, [r4, #20]
 800419c:	b2f6      	uxtb	r6, r6
 800419e:	4283      	cmp	r3, r0
 80041a0:	4637      	mov	r7, r6
 80041a2:	dc04      	bgt.n	80041ae <__swbuf_r+0x42>
 80041a4:	4621      	mov	r1, r4
 80041a6:	4628      	mov	r0, r5
 80041a8:	f000 f926 	bl	80043f8 <_fflush_r>
 80041ac:	bb30      	cbnz	r0, 80041fc <__swbuf_r+0x90>
 80041ae:	68a3      	ldr	r3, [r4, #8]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	60a3      	str	r3, [r4, #8]
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	6022      	str	r2, [r4, #0]
 80041ba:	701e      	strb	r6, [r3, #0]
 80041bc:	6963      	ldr	r3, [r4, #20]
 80041be:	3001      	adds	r0, #1
 80041c0:	4283      	cmp	r3, r0
 80041c2:	d004      	beq.n	80041ce <__swbuf_r+0x62>
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	07db      	lsls	r3, r3, #31
 80041c8:	d506      	bpl.n	80041d8 <__swbuf_r+0x6c>
 80041ca:	2e0a      	cmp	r6, #10
 80041cc:	d104      	bne.n	80041d8 <__swbuf_r+0x6c>
 80041ce:	4621      	mov	r1, r4
 80041d0:	4628      	mov	r0, r5
 80041d2:	f000 f911 	bl	80043f8 <_fflush_r>
 80041d6:	b988      	cbnz	r0, 80041fc <__swbuf_r+0x90>
 80041d8:	4638      	mov	r0, r7
 80041da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <__swbuf_r+0x9c>)
 80041de:	429c      	cmp	r4, r3
 80041e0:	d101      	bne.n	80041e6 <__swbuf_r+0x7a>
 80041e2:	68ac      	ldr	r4, [r5, #8]
 80041e4:	e7cf      	b.n	8004186 <__swbuf_r+0x1a>
 80041e6:	4b09      	ldr	r3, [pc, #36]	; (800420c <__swbuf_r+0xa0>)
 80041e8:	429c      	cmp	r4, r3
 80041ea:	bf08      	it	eq
 80041ec:	68ec      	ldreq	r4, [r5, #12]
 80041ee:	e7ca      	b.n	8004186 <__swbuf_r+0x1a>
 80041f0:	4621      	mov	r1, r4
 80041f2:	4628      	mov	r0, r5
 80041f4:	f000 f80c 	bl	8004210 <__swsetup_r>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d0cb      	beq.n	8004194 <__swbuf_r+0x28>
 80041fc:	f04f 37ff 	mov.w	r7, #4294967295
 8004200:	e7ea      	b.n	80041d8 <__swbuf_r+0x6c>
 8004202:	bf00      	nop
 8004204:	08005008 	.word	0x08005008
 8004208:	08005028 	.word	0x08005028
 800420c:	08004fe8 	.word	0x08004fe8

08004210 <__swsetup_r>:
 8004210:	4b32      	ldr	r3, [pc, #200]	; (80042dc <__swsetup_r+0xcc>)
 8004212:	b570      	push	{r4, r5, r6, lr}
 8004214:	681d      	ldr	r5, [r3, #0]
 8004216:	4606      	mov	r6, r0
 8004218:	460c      	mov	r4, r1
 800421a:	b125      	cbz	r5, 8004226 <__swsetup_r+0x16>
 800421c:	69ab      	ldr	r3, [r5, #24]
 800421e:	b913      	cbnz	r3, 8004226 <__swsetup_r+0x16>
 8004220:	4628      	mov	r0, r5
 8004222:	f000 f97d 	bl	8004520 <__sinit>
 8004226:	4b2e      	ldr	r3, [pc, #184]	; (80042e0 <__swsetup_r+0xd0>)
 8004228:	429c      	cmp	r4, r3
 800422a:	d10f      	bne.n	800424c <__swsetup_r+0x3c>
 800422c:	686c      	ldr	r4, [r5, #4]
 800422e:	89a3      	ldrh	r3, [r4, #12]
 8004230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004234:	0719      	lsls	r1, r3, #28
 8004236:	d42c      	bmi.n	8004292 <__swsetup_r+0x82>
 8004238:	06dd      	lsls	r5, r3, #27
 800423a:	d411      	bmi.n	8004260 <__swsetup_r+0x50>
 800423c:	2309      	movs	r3, #9
 800423e:	6033      	str	r3, [r6, #0]
 8004240:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004244:	81a3      	strh	r3, [r4, #12]
 8004246:	f04f 30ff 	mov.w	r0, #4294967295
 800424a:	e03e      	b.n	80042ca <__swsetup_r+0xba>
 800424c:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <__swsetup_r+0xd4>)
 800424e:	429c      	cmp	r4, r3
 8004250:	d101      	bne.n	8004256 <__swsetup_r+0x46>
 8004252:	68ac      	ldr	r4, [r5, #8]
 8004254:	e7eb      	b.n	800422e <__swsetup_r+0x1e>
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <__swsetup_r+0xd8>)
 8004258:	429c      	cmp	r4, r3
 800425a:	bf08      	it	eq
 800425c:	68ec      	ldreq	r4, [r5, #12]
 800425e:	e7e6      	b.n	800422e <__swsetup_r+0x1e>
 8004260:	0758      	lsls	r0, r3, #29
 8004262:	d512      	bpl.n	800428a <__swsetup_r+0x7a>
 8004264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004266:	b141      	cbz	r1, 800427a <__swsetup_r+0x6a>
 8004268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800426c:	4299      	cmp	r1, r3
 800426e:	d002      	beq.n	8004276 <__swsetup_r+0x66>
 8004270:	4630      	mov	r0, r6
 8004272:	f7ff fdfd 	bl	8003e70 <_free_r>
 8004276:	2300      	movs	r3, #0
 8004278:	6363      	str	r3, [r4, #52]	; 0x34
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004280:	81a3      	strh	r3, [r4, #12]
 8004282:	2300      	movs	r3, #0
 8004284:	6063      	str	r3, [r4, #4]
 8004286:	6923      	ldr	r3, [r4, #16]
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	f043 0308 	orr.w	r3, r3, #8
 8004290:	81a3      	strh	r3, [r4, #12]
 8004292:	6923      	ldr	r3, [r4, #16]
 8004294:	b94b      	cbnz	r3, 80042aa <__swsetup_r+0x9a>
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800429c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a0:	d003      	beq.n	80042aa <__swsetup_r+0x9a>
 80042a2:	4621      	mov	r1, r4
 80042a4:	4630      	mov	r0, r6
 80042a6:	f000 fa01 	bl	80046ac <__smakebuf_r>
 80042aa:	89a0      	ldrh	r0, [r4, #12]
 80042ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042b0:	f010 0301 	ands.w	r3, r0, #1
 80042b4:	d00a      	beq.n	80042cc <__swsetup_r+0xbc>
 80042b6:	2300      	movs	r3, #0
 80042b8:	60a3      	str	r3, [r4, #8]
 80042ba:	6963      	ldr	r3, [r4, #20]
 80042bc:	425b      	negs	r3, r3
 80042be:	61a3      	str	r3, [r4, #24]
 80042c0:	6923      	ldr	r3, [r4, #16]
 80042c2:	b943      	cbnz	r3, 80042d6 <__swsetup_r+0xc6>
 80042c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042c8:	d1ba      	bne.n	8004240 <__swsetup_r+0x30>
 80042ca:	bd70      	pop	{r4, r5, r6, pc}
 80042cc:	0781      	lsls	r1, r0, #30
 80042ce:	bf58      	it	pl
 80042d0:	6963      	ldrpl	r3, [r4, #20]
 80042d2:	60a3      	str	r3, [r4, #8]
 80042d4:	e7f4      	b.n	80042c0 <__swsetup_r+0xb0>
 80042d6:	2000      	movs	r0, #0
 80042d8:	e7f7      	b.n	80042ca <__swsetup_r+0xba>
 80042da:	bf00      	nop
 80042dc:	2000003c 	.word	0x2000003c
 80042e0:	08005008 	.word	0x08005008
 80042e4:	08005028 	.word	0x08005028
 80042e8:	08004fe8 	.word	0x08004fe8

080042ec <__sflush_r>:
 80042ec:	898a      	ldrh	r2, [r1, #12]
 80042ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f2:	4605      	mov	r5, r0
 80042f4:	0710      	lsls	r0, r2, #28
 80042f6:	460c      	mov	r4, r1
 80042f8:	d458      	bmi.n	80043ac <__sflush_r+0xc0>
 80042fa:	684b      	ldr	r3, [r1, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	dc05      	bgt.n	800430c <__sflush_r+0x20>
 8004300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	dc02      	bgt.n	800430c <__sflush_r+0x20>
 8004306:	2000      	movs	r0, #0
 8004308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800430c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800430e:	2e00      	cmp	r6, #0
 8004310:	d0f9      	beq.n	8004306 <__sflush_r+0x1a>
 8004312:	2300      	movs	r3, #0
 8004314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004318:	682f      	ldr	r7, [r5, #0]
 800431a:	602b      	str	r3, [r5, #0]
 800431c:	d032      	beq.n	8004384 <__sflush_r+0x98>
 800431e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	075a      	lsls	r2, r3, #29
 8004324:	d505      	bpl.n	8004332 <__sflush_r+0x46>
 8004326:	6863      	ldr	r3, [r4, #4]
 8004328:	1ac0      	subs	r0, r0, r3
 800432a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800432c:	b10b      	cbz	r3, 8004332 <__sflush_r+0x46>
 800432e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004330:	1ac0      	subs	r0, r0, r3
 8004332:	2300      	movs	r3, #0
 8004334:	4602      	mov	r2, r0
 8004336:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004338:	6a21      	ldr	r1, [r4, #32]
 800433a:	4628      	mov	r0, r5
 800433c:	47b0      	blx	r6
 800433e:	1c43      	adds	r3, r0, #1
 8004340:	89a3      	ldrh	r3, [r4, #12]
 8004342:	d106      	bne.n	8004352 <__sflush_r+0x66>
 8004344:	6829      	ldr	r1, [r5, #0]
 8004346:	291d      	cmp	r1, #29
 8004348:	d82c      	bhi.n	80043a4 <__sflush_r+0xb8>
 800434a:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <__sflush_r+0x108>)
 800434c:	40ca      	lsrs	r2, r1
 800434e:	07d6      	lsls	r6, r2, #31
 8004350:	d528      	bpl.n	80043a4 <__sflush_r+0xb8>
 8004352:	2200      	movs	r2, #0
 8004354:	6062      	str	r2, [r4, #4]
 8004356:	04d9      	lsls	r1, r3, #19
 8004358:	6922      	ldr	r2, [r4, #16]
 800435a:	6022      	str	r2, [r4, #0]
 800435c:	d504      	bpl.n	8004368 <__sflush_r+0x7c>
 800435e:	1c42      	adds	r2, r0, #1
 8004360:	d101      	bne.n	8004366 <__sflush_r+0x7a>
 8004362:	682b      	ldr	r3, [r5, #0]
 8004364:	b903      	cbnz	r3, 8004368 <__sflush_r+0x7c>
 8004366:	6560      	str	r0, [r4, #84]	; 0x54
 8004368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800436a:	602f      	str	r7, [r5, #0]
 800436c:	2900      	cmp	r1, #0
 800436e:	d0ca      	beq.n	8004306 <__sflush_r+0x1a>
 8004370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004374:	4299      	cmp	r1, r3
 8004376:	d002      	beq.n	800437e <__sflush_r+0x92>
 8004378:	4628      	mov	r0, r5
 800437a:	f7ff fd79 	bl	8003e70 <_free_r>
 800437e:	2000      	movs	r0, #0
 8004380:	6360      	str	r0, [r4, #52]	; 0x34
 8004382:	e7c1      	b.n	8004308 <__sflush_r+0x1c>
 8004384:	6a21      	ldr	r1, [r4, #32]
 8004386:	2301      	movs	r3, #1
 8004388:	4628      	mov	r0, r5
 800438a:	47b0      	blx	r6
 800438c:	1c41      	adds	r1, r0, #1
 800438e:	d1c7      	bne.n	8004320 <__sflush_r+0x34>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0c4      	beq.n	8004320 <__sflush_r+0x34>
 8004396:	2b1d      	cmp	r3, #29
 8004398:	d001      	beq.n	800439e <__sflush_r+0xb2>
 800439a:	2b16      	cmp	r3, #22
 800439c:	d101      	bne.n	80043a2 <__sflush_r+0xb6>
 800439e:	602f      	str	r7, [r5, #0]
 80043a0:	e7b1      	b.n	8004306 <__sflush_r+0x1a>
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043a8:	81a3      	strh	r3, [r4, #12]
 80043aa:	e7ad      	b.n	8004308 <__sflush_r+0x1c>
 80043ac:	690f      	ldr	r7, [r1, #16]
 80043ae:	2f00      	cmp	r7, #0
 80043b0:	d0a9      	beq.n	8004306 <__sflush_r+0x1a>
 80043b2:	0793      	lsls	r3, r2, #30
 80043b4:	680e      	ldr	r6, [r1, #0]
 80043b6:	bf08      	it	eq
 80043b8:	694b      	ldreq	r3, [r1, #20]
 80043ba:	600f      	str	r7, [r1, #0]
 80043bc:	bf18      	it	ne
 80043be:	2300      	movne	r3, #0
 80043c0:	eba6 0807 	sub.w	r8, r6, r7
 80043c4:	608b      	str	r3, [r1, #8]
 80043c6:	f1b8 0f00 	cmp.w	r8, #0
 80043ca:	dd9c      	ble.n	8004306 <__sflush_r+0x1a>
 80043cc:	6a21      	ldr	r1, [r4, #32]
 80043ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043d0:	4643      	mov	r3, r8
 80043d2:	463a      	mov	r2, r7
 80043d4:	4628      	mov	r0, r5
 80043d6:	47b0      	blx	r6
 80043d8:	2800      	cmp	r0, #0
 80043da:	dc06      	bgt.n	80043ea <__sflush_r+0xfe>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e2:	81a3      	strh	r3, [r4, #12]
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	e78e      	b.n	8004308 <__sflush_r+0x1c>
 80043ea:	4407      	add	r7, r0
 80043ec:	eba8 0800 	sub.w	r8, r8, r0
 80043f0:	e7e9      	b.n	80043c6 <__sflush_r+0xda>
 80043f2:	bf00      	nop
 80043f4:	20400001 	.word	0x20400001

080043f8 <_fflush_r>:
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	690b      	ldr	r3, [r1, #16]
 80043fc:	4605      	mov	r5, r0
 80043fe:	460c      	mov	r4, r1
 8004400:	b913      	cbnz	r3, 8004408 <_fflush_r+0x10>
 8004402:	2500      	movs	r5, #0
 8004404:	4628      	mov	r0, r5
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	b118      	cbz	r0, 8004412 <_fflush_r+0x1a>
 800440a:	6983      	ldr	r3, [r0, #24]
 800440c:	b90b      	cbnz	r3, 8004412 <_fflush_r+0x1a>
 800440e:	f000 f887 	bl	8004520 <__sinit>
 8004412:	4b14      	ldr	r3, [pc, #80]	; (8004464 <_fflush_r+0x6c>)
 8004414:	429c      	cmp	r4, r3
 8004416:	d11b      	bne.n	8004450 <_fflush_r+0x58>
 8004418:	686c      	ldr	r4, [r5, #4]
 800441a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0ef      	beq.n	8004402 <_fflush_r+0xa>
 8004422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004424:	07d0      	lsls	r0, r2, #31
 8004426:	d404      	bmi.n	8004432 <_fflush_r+0x3a>
 8004428:	0599      	lsls	r1, r3, #22
 800442a:	d402      	bmi.n	8004432 <_fflush_r+0x3a>
 800442c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800442e:	f000 f915 	bl	800465c <__retarget_lock_acquire_recursive>
 8004432:	4628      	mov	r0, r5
 8004434:	4621      	mov	r1, r4
 8004436:	f7ff ff59 	bl	80042ec <__sflush_r>
 800443a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800443c:	07da      	lsls	r2, r3, #31
 800443e:	4605      	mov	r5, r0
 8004440:	d4e0      	bmi.n	8004404 <_fflush_r+0xc>
 8004442:	89a3      	ldrh	r3, [r4, #12]
 8004444:	059b      	lsls	r3, r3, #22
 8004446:	d4dd      	bmi.n	8004404 <_fflush_r+0xc>
 8004448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800444a:	f000 f908 	bl	800465e <__retarget_lock_release_recursive>
 800444e:	e7d9      	b.n	8004404 <_fflush_r+0xc>
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <_fflush_r+0x70>)
 8004452:	429c      	cmp	r4, r3
 8004454:	d101      	bne.n	800445a <_fflush_r+0x62>
 8004456:	68ac      	ldr	r4, [r5, #8]
 8004458:	e7df      	b.n	800441a <_fflush_r+0x22>
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <_fflush_r+0x74>)
 800445c:	429c      	cmp	r4, r3
 800445e:	bf08      	it	eq
 8004460:	68ec      	ldreq	r4, [r5, #12]
 8004462:	e7da      	b.n	800441a <_fflush_r+0x22>
 8004464:	08005008 	.word	0x08005008
 8004468:	08005028 	.word	0x08005028
 800446c:	08004fe8 	.word	0x08004fe8

08004470 <std>:
 8004470:	2300      	movs	r3, #0
 8004472:	b510      	push	{r4, lr}
 8004474:	4604      	mov	r4, r0
 8004476:	e9c0 3300 	strd	r3, r3, [r0]
 800447a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800447e:	6083      	str	r3, [r0, #8]
 8004480:	8181      	strh	r1, [r0, #12]
 8004482:	6643      	str	r3, [r0, #100]	; 0x64
 8004484:	81c2      	strh	r2, [r0, #14]
 8004486:	6183      	str	r3, [r0, #24]
 8004488:	4619      	mov	r1, r3
 800448a:	2208      	movs	r2, #8
 800448c:	305c      	adds	r0, #92	; 0x5c
 800448e:	f7ff fce7 	bl	8003e60 <memset>
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <std+0x38>)
 8004494:	6263      	str	r3, [r4, #36]	; 0x24
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <std+0x3c>)
 8004498:	62a3      	str	r3, [r4, #40]	; 0x28
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <std+0x40>)
 800449c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800449e:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <std+0x44>)
 80044a0:	6224      	str	r4, [r4, #32]
 80044a2:	6323      	str	r3, [r4, #48]	; 0x30
 80044a4:	bd10      	pop	{r4, pc}
 80044a6:	bf00      	nop
 80044a8:	08004d21 	.word	0x08004d21
 80044ac:	08004d43 	.word	0x08004d43
 80044b0:	08004d7b 	.word	0x08004d7b
 80044b4:	08004d9f 	.word	0x08004d9f

080044b8 <_cleanup_r>:
 80044b8:	4901      	ldr	r1, [pc, #4]	; (80044c0 <_cleanup_r+0x8>)
 80044ba:	f000 b8af 	b.w	800461c <_fwalk_reent>
 80044be:	bf00      	nop
 80044c0:	080043f9 	.word	0x080043f9

080044c4 <__sfmoreglue>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	2268      	movs	r2, #104	; 0x68
 80044c8:	1e4d      	subs	r5, r1, #1
 80044ca:	4355      	muls	r5, r2
 80044cc:	460e      	mov	r6, r1
 80044ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044d2:	f7ff fd39 	bl	8003f48 <_malloc_r>
 80044d6:	4604      	mov	r4, r0
 80044d8:	b140      	cbz	r0, 80044ec <__sfmoreglue+0x28>
 80044da:	2100      	movs	r1, #0
 80044dc:	e9c0 1600 	strd	r1, r6, [r0]
 80044e0:	300c      	adds	r0, #12
 80044e2:	60a0      	str	r0, [r4, #8]
 80044e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044e8:	f7ff fcba 	bl	8003e60 <memset>
 80044ec:	4620      	mov	r0, r4
 80044ee:	bd70      	pop	{r4, r5, r6, pc}

080044f0 <__sfp_lock_acquire>:
 80044f0:	4801      	ldr	r0, [pc, #4]	; (80044f8 <__sfp_lock_acquire+0x8>)
 80044f2:	f000 b8b3 	b.w	800465c <__retarget_lock_acquire_recursive>
 80044f6:	bf00      	nop
 80044f8:	20000149 	.word	0x20000149

080044fc <__sfp_lock_release>:
 80044fc:	4801      	ldr	r0, [pc, #4]	; (8004504 <__sfp_lock_release+0x8>)
 80044fe:	f000 b8ae 	b.w	800465e <__retarget_lock_release_recursive>
 8004502:	bf00      	nop
 8004504:	20000149 	.word	0x20000149

08004508 <__sinit_lock_acquire>:
 8004508:	4801      	ldr	r0, [pc, #4]	; (8004510 <__sinit_lock_acquire+0x8>)
 800450a:	f000 b8a7 	b.w	800465c <__retarget_lock_acquire_recursive>
 800450e:	bf00      	nop
 8004510:	2000014a 	.word	0x2000014a

08004514 <__sinit_lock_release>:
 8004514:	4801      	ldr	r0, [pc, #4]	; (800451c <__sinit_lock_release+0x8>)
 8004516:	f000 b8a2 	b.w	800465e <__retarget_lock_release_recursive>
 800451a:	bf00      	nop
 800451c:	2000014a 	.word	0x2000014a

08004520 <__sinit>:
 8004520:	b510      	push	{r4, lr}
 8004522:	4604      	mov	r4, r0
 8004524:	f7ff fff0 	bl	8004508 <__sinit_lock_acquire>
 8004528:	69a3      	ldr	r3, [r4, #24]
 800452a:	b11b      	cbz	r3, 8004534 <__sinit+0x14>
 800452c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004530:	f7ff bff0 	b.w	8004514 <__sinit_lock_release>
 8004534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004538:	6523      	str	r3, [r4, #80]	; 0x50
 800453a:	4b13      	ldr	r3, [pc, #76]	; (8004588 <__sinit+0x68>)
 800453c:	4a13      	ldr	r2, [pc, #76]	; (800458c <__sinit+0x6c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	62a2      	str	r2, [r4, #40]	; 0x28
 8004542:	42a3      	cmp	r3, r4
 8004544:	bf04      	itt	eq
 8004546:	2301      	moveq	r3, #1
 8004548:	61a3      	streq	r3, [r4, #24]
 800454a:	4620      	mov	r0, r4
 800454c:	f000 f820 	bl	8004590 <__sfp>
 8004550:	6060      	str	r0, [r4, #4]
 8004552:	4620      	mov	r0, r4
 8004554:	f000 f81c 	bl	8004590 <__sfp>
 8004558:	60a0      	str	r0, [r4, #8]
 800455a:	4620      	mov	r0, r4
 800455c:	f000 f818 	bl	8004590 <__sfp>
 8004560:	2200      	movs	r2, #0
 8004562:	60e0      	str	r0, [r4, #12]
 8004564:	2104      	movs	r1, #4
 8004566:	6860      	ldr	r0, [r4, #4]
 8004568:	f7ff ff82 	bl	8004470 <std>
 800456c:	68a0      	ldr	r0, [r4, #8]
 800456e:	2201      	movs	r2, #1
 8004570:	2109      	movs	r1, #9
 8004572:	f7ff ff7d 	bl	8004470 <std>
 8004576:	68e0      	ldr	r0, [r4, #12]
 8004578:	2202      	movs	r2, #2
 800457a:	2112      	movs	r1, #18
 800457c:	f7ff ff78 	bl	8004470 <std>
 8004580:	2301      	movs	r3, #1
 8004582:	61a3      	str	r3, [r4, #24]
 8004584:	e7d2      	b.n	800452c <__sinit+0xc>
 8004586:	bf00      	nop
 8004588:	08004fe4 	.word	0x08004fe4
 800458c:	080044b9 	.word	0x080044b9

08004590 <__sfp>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	4607      	mov	r7, r0
 8004594:	f7ff ffac 	bl	80044f0 <__sfp_lock_acquire>
 8004598:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <__sfp+0x84>)
 800459a:	681e      	ldr	r6, [r3, #0]
 800459c:	69b3      	ldr	r3, [r6, #24]
 800459e:	b913      	cbnz	r3, 80045a6 <__sfp+0x16>
 80045a0:	4630      	mov	r0, r6
 80045a2:	f7ff ffbd 	bl	8004520 <__sinit>
 80045a6:	3648      	adds	r6, #72	; 0x48
 80045a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	d503      	bpl.n	80045b8 <__sfp+0x28>
 80045b0:	6833      	ldr	r3, [r6, #0]
 80045b2:	b30b      	cbz	r3, 80045f8 <__sfp+0x68>
 80045b4:	6836      	ldr	r6, [r6, #0]
 80045b6:	e7f7      	b.n	80045a8 <__sfp+0x18>
 80045b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045bc:	b9d5      	cbnz	r5, 80045f4 <__sfp+0x64>
 80045be:	4b16      	ldr	r3, [pc, #88]	; (8004618 <__sfp+0x88>)
 80045c0:	60e3      	str	r3, [r4, #12]
 80045c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045c6:	6665      	str	r5, [r4, #100]	; 0x64
 80045c8:	f000 f847 	bl	800465a <__retarget_lock_init_recursive>
 80045cc:	f7ff ff96 	bl	80044fc <__sfp_lock_release>
 80045d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80045d8:	6025      	str	r5, [r4, #0]
 80045da:	61a5      	str	r5, [r4, #24]
 80045dc:	2208      	movs	r2, #8
 80045de:	4629      	mov	r1, r5
 80045e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045e4:	f7ff fc3c 	bl	8003e60 <memset>
 80045e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80045ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80045f0:	4620      	mov	r0, r4
 80045f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045f4:	3468      	adds	r4, #104	; 0x68
 80045f6:	e7d9      	b.n	80045ac <__sfp+0x1c>
 80045f8:	2104      	movs	r1, #4
 80045fa:	4638      	mov	r0, r7
 80045fc:	f7ff ff62 	bl	80044c4 <__sfmoreglue>
 8004600:	4604      	mov	r4, r0
 8004602:	6030      	str	r0, [r6, #0]
 8004604:	2800      	cmp	r0, #0
 8004606:	d1d5      	bne.n	80045b4 <__sfp+0x24>
 8004608:	f7ff ff78 	bl	80044fc <__sfp_lock_release>
 800460c:	230c      	movs	r3, #12
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	e7ee      	b.n	80045f0 <__sfp+0x60>
 8004612:	bf00      	nop
 8004614:	08004fe4 	.word	0x08004fe4
 8004618:	ffff0001 	.word	0xffff0001

0800461c <_fwalk_reent>:
 800461c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004620:	4606      	mov	r6, r0
 8004622:	4688      	mov	r8, r1
 8004624:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004628:	2700      	movs	r7, #0
 800462a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800462e:	f1b9 0901 	subs.w	r9, r9, #1
 8004632:	d505      	bpl.n	8004640 <_fwalk_reent+0x24>
 8004634:	6824      	ldr	r4, [r4, #0]
 8004636:	2c00      	cmp	r4, #0
 8004638:	d1f7      	bne.n	800462a <_fwalk_reent+0xe>
 800463a:	4638      	mov	r0, r7
 800463c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004640:	89ab      	ldrh	r3, [r5, #12]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d907      	bls.n	8004656 <_fwalk_reent+0x3a>
 8004646:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800464a:	3301      	adds	r3, #1
 800464c:	d003      	beq.n	8004656 <_fwalk_reent+0x3a>
 800464e:	4629      	mov	r1, r5
 8004650:	4630      	mov	r0, r6
 8004652:	47c0      	blx	r8
 8004654:	4307      	orrs	r7, r0
 8004656:	3568      	adds	r5, #104	; 0x68
 8004658:	e7e9      	b.n	800462e <_fwalk_reent+0x12>

0800465a <__retarget_lock_init_recursive>:
 800465a:	4770      	bx	lr

0800465c <__retarget_lock_acquire_recursive>:
 800465c:	4770      	bx	lr

0800465e <__retarget_lock_release_recursive>:
 800465e:	4770      	bx	lr

08004660 <__swhatbuf_r>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	460e      	mov	r6, r1
 8004664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004668:	2900      	cmp	r1, #0
 800466a:	b096      	sub	sp, #88	; 0x58
 800466c:	4614      	mov	r4, r2
 800466e:	461d      	mov	r5, r3
 8004670:	da08      	bge.n	8004684 <__swhatbuf_r+0x24>
 8004672:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	602a      	str	r2, [r5, #0]
 800467a:	061a      	lsls	r2, r3, #24
 800467c:	d410      	bmi.n	80046a0 <__swhatbuf_r+0x40>
 800467e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004682:	e00e      	b.n	80046a2 <__swhatbuf_r+0x42>
 8004684:	466a      	mov	r2, sp
 8004686:	f000 fbb1 	bl	8004dec <_fstat_r>
 800468a:	2800      	cmp	r0, #0
 800468c:	dbf1      	blt.n	8004672 <__swhatbuf_r+0x12>
 800468e:	9a01      	ldr	r2, [sp, #4]
 8004690:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004694:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004698:	425a      	negs	r2, r3
 800469a:	415a      	adcs	r2, r3
 800469c:	602a      	str	r2, [r5, #0]
 800469e:	e7ee      	b.n	800467e <__swhatbuf_r+0x1e>
 80046a0:	2340      	movs	r3, #64	; 0x40
 80046a2:	2000      	movs	r0, #0
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	b016      	add	sp, #88	; 0x58
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080046ac <__smakebuf_r>:
 80046ac:	898b      	ldrh	r3, [r1, #12]
 80046ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046b0:	079d      	lsls	r5, r3, #30
 80046b2:	4606      	mov	r6, r0
 80046b4:	460c      	mov	r4, r1
 80046b6:	d507      	bpl.n	80046c8 <__smakebuf_r+0x1c>
 80046b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	6123      	str	r3, [r4, #16]
 80046c0:	2301      	movs	r3, #1
 80046c2:	6163      	str	r3, [r4, #20]
 80046c4:	b002      	add	sp, #8
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	ab01      	add	r3, sp, #4
 80046ca:	466a      	mov	r2, sp
 80046cc:	f7ff ffc8 	bl	8004660 <__swhatbuf_r>
 80046d0:	9900      	ldr	r1, [sp, #0]
 80046d2:	4605      	mov	r5, r0
 80046d4:	4630      	mov	r0, r6
 80046d6:	f7ff fc37 	bl	8003f48 <_malloc_r>
 80046da:	b948      	cbnz	r0, 80046f0 <__smakebuf_r+0x44>
 80046dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046e0:	059a      	lsls	r2, r3, #22
 80046e2:	d4ef      	bmi.n	80046c4 <__smakebuf_r+0x18>
 80046e4:	f023 0303 	bic.w	r3, r3, #3
 80046e8:	f043 0302 	orr.w	r3, r3, #2
 80046ec:	81a3      	strh	r3, [r4, #12]
 80046ee:	e7e3      	b.n	80046b8 <__smakebuf_r+0xc>
 80046f0:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <__smakebuf_r+0x7c>)
 80046f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	6020      	str	r0, [r4, #0]
 80046f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fc:	81a3      	strh	r3, [r4, #12]
 80046fe:	9b00      	ldr	r3, [sp, #0]
 8004700:	6163      	str	r3, [r4, #20]
 8004702:	9b01      	ldr	r3, [sp, #4]
 8004704:	6120      	str	r0, [r4, #16]
 8004706:	b15b      	cbz	r3, 8004720 <__smakebuf_r+0x74>
 8004708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800470c:	4630      	mov	r0, r6
 800470e:	f000 fb7f 	bl	8004e10 <_isatty_r>
 8004712:	b128      	cbz	r0, 8004720 <__smakebuf_r+0x74>
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	f023 0303 	bic.w	r3, r3, #3
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	81a3      	strh	r3, [r4, #12]
 8004720:	89a0      	ldrh	r0, [r4, #12]
 8004722:	4305      	orrs	r5, r0
 8004724:	81a5      	strh	r5, [r4, #12]
 8004726:	e7cd      	b.n	80046c4 <__smakebuf_r+0x18>
 8004728:	080044b9 	.word	0x080044b9

0800472c <__malloc_lock>:
 800472c:	4801      	ldr	r0, [pc, #4]	; (8004734 <__malloc_lock+0x8>)
 800472e:	f7ff bf95 	b.w	800465c <__retarget_lock_acquire_recursive>
 8004732:	bf00      	nop
 8004734:	20000148 	.word	0x20000148

08004738 <__malloc_unlock>:
 8004738:	4801      	ldr	r0, [pc, #4]	; (8004740 <__malloc_unlock+0x8>)
 800473a:	f7ff bf90 	b.w	800465e <__retarget_lock_release_recursive>
 800473e:	bf00      	nop
 8004740:	20000148 	.word	0x20000148

08004744 <__sfputc_r>:
 8004744:	6893      	ldr	r3, [r2, #8]
 8004746:	3b01      	subs	r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	b410      	push	{r4}
 800474c:	6093      	str	r3, [r2, #8]
 800474e:	da08      	bge.n	8004762 <__sfputc_r+0x1e>
 8004750:	6994      	ldr	r4, [r2, #24]
 8004752:	42a3      	cmp	r3, r4
 8004754:	db01      	blt.n	800475a <__sfputc_r+0x16>
 8004756:	290a      	cmp	r1, #10
 8004758:	d103      	bne.n	8004762 <__sfputc_r+0x1e>
 800475a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800475e:	f7ff bd05 	b.w	800416c <__swbuf_r>
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	1c58      	adds	r0, r3, #1
 8004766:	6010      	str	r0, [r2, #0]
 8004768:	7019      	strb	r1, [r3, #0]
 800476a:	4608      	mov	r0, r1
 800476c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004770:	4770      	bx	lr

08004772 <__sfputs_r>:
 8004772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004774:	4606      	mov	r6, r0
 8004776:	460f      	mov	r7, r1
 8004778:	4614      	mov	r4, r2
 800477a:	18d5      	adds	r5, r2, r3
 800477c:	42ac      	cmp	r4, r5
 800477e:	d101      	bne.n	8004784 <__sfputs_r+0x12>
 8004780:	2000      	movs	r0, #0
 8004782:	e007      	b.n	8004794 <__sfputs_r+0x22>
 8004784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004788:	463a      	mov	r2, r7
 800478a:	4630      	mov	r0, r6
 800478c:	f7ff ffda 	bl	8004744 <__sfputc_r>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d1f3      	bne.n	800477c <__sfputs_r+0xa>
 8004794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004798 <_vfiprintf_r>:
 8004798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479c:	460d      	mov	r5, r1
 800479e:	b09d      	sub	sp, #116	; 0x74
 80047a0:	4614      	mov	r4, r2
 80047a2:	4698      	mov	r8, r3
 80047a4:	4606      	mov	r6, r0
 80047a6:	b118      	cbz	r0, 80047b0 <_vfiprintf_r+0x18>
 80047a8:	6983      	ldr	r3, [r0, #24]
 80047aa:	b90b      	cbnz	r3, 80047b0 <_vfiprintf_r+0x18>
 80047ac:	f7ff feb8 	bl	8004520 <__sinit>
 80047b0:	4b89      	ldr	r3, [pc, #548]	; (80049d8 <_vfiprintf_r+0x240>)
 80047b2:	429d      	cmp	r5, r3
 80047b4:	d11b      	bne.n	80047ee <_vfiprintf_r+0x56>
 80047b6:	6875      	ldr	r5, [r6, #4]
 80047b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047ba:	07d9      	lsls	r1, r3, #31
 80047bc:	d405      	bmi.n	80047ca <_vfiprintf_r+0x32>
 80047be:	89ab      	ldrh	r3, [r5, #12]
 80047c0:	059a      	lsls	r2, r3, #22
 80047c2:	d402      	bmi.n	80047ca <_vfiprintf_r+0x32>
 80047c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047c6:	f7ff ff49 	bl	800465c <__retarget_lock_acquire_recursive>
 80047ca:	89ab      	ldrh	r3, [r5, #12]
 80047cc:	071b      	lsls	r3, r3, #28
 80047ce:	d501      	bpl.n	80047d4 <_vfiprintf_r+0x3c>
 80047d0:	692b      	ldr	r3, [r5, #16]
 80047d2:	b9eb      	cbnz	r3, 8004810 <_vfiprintf_r+0x78>
 80047d4:	4629      	mov	r1, r5
 80047d6:	4630      	mov	r0, r6
 80047d8:	f7ff fd1a 	bl	8004210 <__swsetup_r>
 80047dc:	b1c0      	cbz	r0, 8004810 <_vfiprintf_r+0x78>
 80047de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047e0:	07dc      	lsls	r4, r3, #31
 80047e2:	d50e      	bpl.n	8004802 <_vfiprintf_r+0x6a>
 80047e4:	f04f 30ff 	mov.w	r0, #4294967295
 80047e8:	b01d      	add	sp, #116	; 0x74
 80047ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ee:	4b7b      	ldr	r3, [pc, #492]	; (80049dc <_vfiprintf_r+0x244>)
 80047f0:	429d      	cmp	r5, r3
 80047f2:	d101      	bne.n	80047f8 <_vfiprintf_r+0x60>
 80047f4:	68b5      	ldr	r5, [r6, #8]
 80047f6:	e7df      	b.n	80047b8 <_vfiprintf_r+0x20>
 80047f8:	4b79      	ldr	r3, [pc, #484]	; (80049e0 <_vfiprintf_r+0x248>)
 80047fa:	429d      	cmp	r5, r3
 80047fc:	bf08      	it	eq
 80047fe:	68f5      	ldreq	r5, [r6, #12]
 8004800:	e7da      	b.n	80047b8 <_vfiprintf_r+0x20>
 8004802:	89ab      	ldrh	r3, [r5, #12]
 8004804:	0598      	lsls	r0, r3, #22
 8004806:	d4ed      	bmi.n	80047e4 <_vfiprintf_r+0x4c>
 8004808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800480a:	f7ff ff28 	bl	800465e <__retarget_lock_release_recursive>
 800480e:	e7e9      	b.n	80047e4 <_vfiprintf_r+0x4c>
 8004810:	2300      	movs	r3, #0
 8004812:	9309      	str	r3, [sp, #36]	; 0x24
 8004814:	2320      	movs	r3, #32
 8004816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800481a:	f8cd 800c 	str.w	r8, [sp, #12]
 800481e:	2330      	movs	r3, #48	; 0x30
 8004820:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80049e4 <_vfiprintf_r+0x24c>
 8004824:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004828:	f04f 0901 	mov.w	r9, #1
 800482c:	4623      	mov	r3, r4
 800482e:	469a      	mov	sl, r3
 8004830:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004834:	b10a      	cbz	r2, 800483a <_vfiprintf_r+0xa2>
 8004836:	2a25      	cmp	r2, #37	; 0x25
 8004838:	d1f9      	bne.n	800482e <_vfiprintf_r+0x96>
 800483a:	ebba 0b04 	subs.w	fp, sl, r4
 800483e:	d00b      	beq.n	8004858 <_vfiprintf_r+0xc0>
 8004840:	465b      	mov	r3, fp
 8004842:	4622      	mov	r2, r4
 8004844:	4629      	mov	r1, r5
 8004846:	4630      	mov	r0, r6
 8004848:	f7ff ff93 	bl	8004772 <__sfputs_r>
 800484c:	3001      	adds	r0, #1
 800484e:	f000 80aa 	beq.w	80049a6 <_vfiprintf_r+0x20e>
 8004852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004854:	445a      	add	r2, fp
 8004856:	9209      	str	r2, [sp, #36]	; 0x24
 8004858:	f89a 3000 	ldrb.w	r3, [sl]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80a2 	beq.w	80049a6 <_vfiprintf_r+0x20e>
 8004862:	2300      	movs	r3, #0
 8004864:	f04f 32ff 	mov.w	r2, #4294967295
 8004868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800486c:	f10a 0a01 	add.w	sl, sl, #1
 8004870:	9304      	str	r3, [sp, #16]
 8004872:	9307      	str	r3, [sp, #28]
 8004874:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004878:	931a      	str	r3, [sp, #104]	; 0x68
 800487a:	4654      	mov	r4, sl
 800487c:	2205      	movs	r2, #5
 800487e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004882:	4858      	ldr	r0, [pc, #352]	; (80049e4 <_vfiprintf_r+0x24c>)
 8004884:	f7fb fcc4 	bl	8000210 <memchr>
 8004888:	9a04      	ldr	r2, [sp, #16]
 800488a:	b9d8      	cbnz	r0, 80048c4 <_vfiprintf_r+0x12c>
 800488c:	06d1      	lsls	r1, r2, #27
 800488e:	bf44      	itt	mi
 8004890:	2320      	movmi	r3, #32
 8004892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004896:	0713      	lsls	r3, r2, #28
 8004898:	bf44      	itt	mi
 800489a:	232b      	movmi	r3, #43	; 0x2b
 800489c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048a0:	f89a 3000 	ldrb.w	r3, [sl]
 80048a4:	2b2a      	cmp	r3, #42	; 0x2a
 80048a6:	d015      	beq.n	80048d4 <_vfiprintf_r+0x13c>
 80048a8:	9a07      	ldr	r2, [sp, #28]
 80048aa:	4654      	mov	r4, sl
 80048ac:	2000      	movs	r0, #0
 80048ae:	f04f 0c0a 	mov.w	ip, #10
 80048b2:	4621      	mov	r1, r4
 80048b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048b8:	3b30      	subs	r3, #48	; 0x30
 80048ba:	2b09      	cmp	r3, #9
 80048bc:	d94e      	bls.n	800495c <_vfiprintf_r+0x1c4>
 80048be:	b1b0      	cbz	r0, 80048ee <_vfiprintf_r+0x156>
 80048c0:	9207      	str	r2, [sp, #28]
 80048c2:	e014      	b.n	80048ee <_vfiprintf_r+0x156>
 80048c4:	eba0 0308 	sub.w	r3, r0, r8
 80048c8:	fa09 f303 	lsl.w	r3, r9, r3
 80048cc:	4313      	orrs	r3, r2
 80048ce:	9304      	str	r3, [sp, #16]
 80048d0:	46a2      	mov	sl, r4
 80048d2:	e7d2      	b.n	800487a <_vfiprintf_r+0xe2>
 80048d4:	9b03      	ldr	r3, [sp, #12]
 80048d6:	1d19      	adds	r1, r3, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	9103      	str	r1, [sp, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bfbb      	ittet	lt
 80048e0:	425b      	neglt	r3, r3
 80048e2:	f042 0202 	orrlt.w	r2, r2, #2
 80048e6:	9307      	strge	r3, [sp, #28]
 80048e8:	9307      	strlt	r3, [sp, #28]
 80048ea:	bfb8      	it	lt
 80048ec:	9204      	strlt	r2, [sp, #16]
 80048ee:	7823      	ldrb	r3, [r4, #0]
 80048f0:	2b2e      	cmp	r3, #46	; 0x2e
 80048f2:	d10c      	bne.n	800490e <_vfiprintf_r+0x176>
 80048f4:	7863      	ldrb	r3, [r4, #1]
 80048f6:	2b2a      	cmp	r3, #42	; 0x2a
 80048f8:	d135      	bne.n	8004966 <_vfiprintf_r+0x1ce>
 80048fa:	9b03      	ldr	r3, [sp, #12]
 80048fc:	1d1a      	adds	r2, r3, #4
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	9203      	str	r2, [sp, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	bfb8      	it	lt
 8004906:	f04f 33ff 	movlt.w	r3, #4294967295
 800490a:	3402      	adds	r4, #2
 800490c:	9305      	str	r3, [sp, #20]
 800490e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80049f4 <_vfiprintf_r+0x25c>
 8004912:	7821      	ldrb	r1, [r4, #0]
 8004914:	2203      	movs	r2, #3
 8004916:	4650      	mov	r0, sl
 8004918:	f7fb fc7a 	bl	8000210 <memchr>
 800491c:	b140      	cbz	r0, 8004930 <_vfiprintf_r+0x198>
 800491e:	2340      	movs	r3, #64	; 0x40
 8004920:	eba0 000a 	sub.w	r0, r0, sl
 8004924:	fa03 f000 	lsl.w	r0, r3, r0
 8004928:	9b04      	ldr	r3, [sp, #16]
 800492a:	4303      	orrs	r3, r0
 800492c:	3401      	adds	r4, #1
 800492e:	9304      	str	r3, [sp, #16]
 8004930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004934:	482c      	ldr	r0, [pc, #176]	; (80049e8 <_vfiprintf_r+0x250>)
 8004936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800493a:	2206      	movs	r2, #6
 800493c:	f7fb fc68 	bl	8000210 <memchr>
 8004940:	2800      	cmp	r0, #0
 8004942:	d03f      	beq.n	80049c4 <_vfiprintf_r+0x22c>
 8004944:	4b29      	ldr	r3, [pc, #164]	; (80049ec <_vfiprintf_r+0x254>)
 8004946:	bb1b      	cbnz	r3, 8004990 <_vfiprintf_r+0x1f8>
 8004948:	9b03      	ldr	r3, [sp, #12]
 800494a:	3307      	adds	r3, #7
 800494c:	f023 0307 	bic.w	r3, r3, #7
 8004950:	3308      	adds	r3, #8
 8004952:	9303      	str	r3, [sp, #12]
 8004954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004956:	443b      	add	r3, r7
 8004958:	9309      	str	r3, [sp, #36]	; 0x24
 800495a:	e767      	b.n	800482c <_vfiprintf_r+0x94>
 800495c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004960:	460c      	mov	r4, r1
 8004962:	2001      	movs	r0, #1
 8004964:	e7a5      	b.n	80048b2 <_vfiprintf_r+0x11a>
 8004966:	2300      	movs	r3, #0
 8004968:	3401      	adds	r4, #1
 800496a:	9305      	str	r3, [sp, #20]
 800496c:	4619      	mov	r1, r3
 800496e:	f04f 0c0a 	mov.w	ip, #10
 8004972:	4620      	mov	r0, r4
 8004974:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004978:	3a30      	subs	r2, #48	; 0x30
 800497a:	2a09      	cmp	r2, #9
 800497c:	d903      	bls.n	8004986 <_vfiprintf_r+0x1ee>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0c5      	beq.n	800490e <_vfiprintf_r+0x176>
 8004982:	9105      	str	r1, [sp, #20]
 8004984:	e7c3      	b.n	800490e <_vfiprintf_r+0x176>
 8004986:	fb0c 2101 	mla	r1, ip, r1, r2
 800498a:	4604      	mov	r4, r0
 800498c:	2301      	movs	r3, #1
 800498e:	e7f0      	b.n	8004972 <_vfiprintf_r+0x1da>
 8004990:	ab03      	add	r3, sp, #12
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	462a      	mov	r2, r5
 8004996:	4b16      	ldr	r3, [pc, #88]	; (80049f0 <_vfiprintf_r+0x258>)
 8004998:	a904      	add	r1, sp, #16
 800499a:	4630      	mov	r0, r6
 800499c:	f3af 8000 	nop.w
 80049a0:	4607      	mov	r7, r0
 80049a2:	1c78      	adds	r0, r7, #1
 80049a4:	d1d6      	bne.n	8004954 <_vfiprintf_r+0x1bc>
 80049a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049a8:	07d9      	lsls	r1, r3, #31
 80049aa:	d405      	bmi.n	80049b8 <_vfiprintf_r+0x220>
 80049ac:	89ab      	ldrh	r3, [r5, #12]
 80049ae:	059a      	lsls	r2, r3, #22
 80049b0:	d402      	bmi.n	80049b8 <_vfiprintf_r+0x220>
 80049b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049b4:	f7ff fe53 	bl	800465e <__retarget_lock_release_recursive>
 80049b8:	89ab      	ldrh	r3, [r5, #12]
 80049ba:	065b      	lsls	r3, r3, #25
 80049bc:	f53f af12 	bmi.w	80047e4 <_vfiprintf_r+0x4c>
 80049c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049c2:	e711      	b.n	80047e8 <_vfiprintf_r+0x50>
 80049c4:	ab03      	add	r3, sp, #12
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	462a      	mov	r2, r5
 80049ca:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <_vfiprintf_r+0x258>)
 80049cc:	a904      	add	r1, sp, #16
 80049ce:	4630      	mov	r0, r6
 80049d0:	f000 f880 	bl	8004ad4 <_printf_i>
 80049d4:	e7e4      	b.n	80049a0 <_vfiprintf_r+0x208>
 80049d6:	bf00      	nop
 80049d8:	08005008 	.word	0x08005008
 80049dc:	08005028 	.word	0x08005028
 80049e0:	08004fe8 	.word	0x08004fe8
 80049e4:	08005048 	.word	0x08005048
 80049e8:	08005052 	.word	0x08005052
 80049ec:	00000000 	.word	0x00000000
 80049f0:	08004773 	.word	0x08004773
 80049f4:	0800504e 	.word	0x0800504e

080049f8 <_printf_common>:
 80049f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049fc:	4616      	mov	r6, r2
 80049fe:	4699      	mov	r9, r3
 8004a00:	688a      	ldr	r2, [r1, #8]
 8004a02:	690b      	ldr	r3, [r1, #16]
 8004a04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	bfb8      	it	lt
 8004a0c:	4613      	movlt	r3, r2
 8004a0e:	6033      	str	r3, [r6, #0]
 8004a10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a14:	4607      	mov	r7, r0
 8004a16:	460c      	mov	r4, r1
 8004a18:	b10a      	cbz	r2, 8004a1e <_printf_common+0x26>
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	6033      	str	r3, [r6, #0]
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	0699      	lsls	r1, r3, #26
 8004a22:	bf42      	ittt	mi
 8004a24:	6833      	ldrmi	r3, [r6, #0]
 8004a26:	3302      	addmi	r3, #2
 8004a28:	6033      	strmi	r3, [r6, #0]
 8004a2a:	6825      	ldr	r5, [r4, #0]
 8004a2c:	f015 0506 	ands.w	r5, r5, #6
 8004a30:	d106      	bne.n	8004a40 <_printf_common+0x48>
 8004a32:	f104 0a19 	add.w	sl, r4, #25
 8004a36:	68e3      	ldr	r3, [r4, #12]
 8004a38:	6832      	ldr	r2, [r6, #0]
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	42ab      	cmp	r3, r5
 8004a3e:	dc26      	bgt.n	8004a8e <_printf_common+0x96>
 8004a40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a44:	1e13      	subs	r3, r2, #0
 8004a46:	6822      	ldr	r2, [r4, #0]
 8004a48:	bf18      	it	ne
 8004a4a:	2301      	movne	r3, #1
 8004a4c:	0692      	lsls	r2, r2, #26
 8004a4e:	d42b      	bmi.n	8004aa8 <_printf_common+0xb0>
 8004a50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a54:	4649      	mov	r1, r9
 8004a56:	4638      	mov	r0, r7
 8004a58:	47c0      	blx	r8
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	d01e      	beq.n	8004a9c <_printf_common+0xa4>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	68e5      	ldr	r5, [r4, #12]
 8004a62:	6832      	ldr	r2, [r6, #0]
 8004a64:	f003 0306 	and.w	r3, r3, #6
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	bf08      	it	eq
 8004a6c:	1aad      	subeq	r5, r5, r2
 8004a6e:	68a3      	ldr	r3, [r4, #8]
 8004a70:	6922      	ldr	r2, [r4, #16]
 8004a72:	bf0c      	ite	eq
 8004a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a78:	2500      	movne	r5, #0
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	bfc4      	itt	gt
 8004a7e:	1a9b      	subgt	r3, r3, r2
 8004a80:	18ed      	addgt	r5, r5, r3
 8004a82:	2600      	movs	r6, #0
 8004a84:	341a      	adds	r4, #26
 8004a86:	42b5      	cmp	r5, r6
 8004a88:	d11a      	bne.n	8004ac0 <_printf_common+0xc8>
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e008      	b.n	8004aa0 <_printf_common+0xa8>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	4652      	mov	r2, sl
 8004a92:	4649      	mov	r1, r9
 8004a94:	4638      	mov	r0, r7
 8004a96:	47c0      	blx	r8
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d103      	bne.n	8004aa4 <_printf_common+0xac>
 8004a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa4:	3501      	adds	r5, #1
 8004aa6:	e7c6      	b.n	8004a36 <_printf_common+0x3e>
 8004aa8:	18e1      	adds	r1, r4, r3
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	2030      	movs	r0, #48	; 0x30
 8004aae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ab2:	4422      	add	r2, r4
 8004ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004abc:	3302      	adds	r3, #2
 8004abe:	e7c7      	b.n	8004a50 <_printf_common+0x58>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	47c0      	blx	r8
 8004aca:	3001      	adds	r0, #1
 8004acc:	d0e6      	beq.n	8004a9c <_printf_common+0xa4>
 8004ace:	3601      	adds	r6, #1
 8004ad0:	e7d9      	b.n	8004a86 <_printf_common+0x8e>
	...

08004ad4 <_printf_i>:
 8004ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad8:	7e0f      	ldrb	r7, [r1, #24]
 8004ada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004adc:	2f78      	cmp	r7, #120	; 0x78
 8004ade:	4691      	mov	r9, r2
 8004ae0:	4680      	mov	r8, r0
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	469a      	mov	sl, r3
 8004ae6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004aea:	d807      	bhi.n	8004afc <_printf_i+0x28>
 8004aec:	2f62      	cmp	r7, #98	; 0x62
 8004aee:	d80a      	bhi.n	8004b06 <_printf_i+0x32>
 8004af0:	2f00      	cmp	r7, #0
 8004af2:	f000 80d8 	beq.w	8004ca6 <_printf_i+0x1d2>
 8004af6:	2f58      	cmp	r7, #88	; 0x58
 8004af8:	f000 80a3 	beq.w	8004c42 <_printf_i+0x16e>
 8004afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b04:	e03a      	b.n	8004b7c <_printf_i+0xa8>
 8004b06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b0a:	2b15      	cmp	r3, #21
 8004b0c:	d8f6      	bhi.n	8004afc <_printf_i+0x28>
 8004b0e:	a101      	add	r1, pc, #4	; (adr r1, 8004b14 <_printf_i+0x40>)
 8004b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b14:	08004b6d 	.word	0x08004b6d
 8004b18:	08004b81 	.word	0x08004b81
 8004b1c:	08004afd 	.word	0x08004afd
 8004b20:	08004afd 	.word	0x08004afd
 8004b24:	08004afd 	.word	0x08004afd
 8004b28:	08004afd 	.word	0x08004afd
 8004b2c:	08004b81 	.word	0x08004b81
 8004b30:	08004afd 	.word	0x08004afd
 8004b34:	08004afd 	.word	0x08004afd
 8004b38:	08004afd 	.word	0x08004afd
 8004b3c:	08004afd 	.word	0x08004afd
 8004b40:	08004c8d 	.word	0x08004c8d
 8004b44:	08004bb1 	.word	0x08004bb1
 8004b48:	08004c6f 	.word	0x08004c6f
 8004b4c:	08004afd 	.word	0x08004afd
 8004b50:	08004afd 	.word	0x08004afd
 8004b54:	08004caf 	.word	0x08004caf
 8004b58:	08004afd 	.word	0x08004afd
 8004b5c:	08004bb1 	.word	0x08004bb1
 8004b60:	08004afd 	.word	0x08004afd
 8004b64:	08004afd 	.word	0x08004afd
 8004b68:	08004c77 	.word	0x08004c77
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	1d1a      	adds	r2, r3, #4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	602a      	str	r2, [r5, #0]
 8004b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e0a3      	b.n	8004cc8 <_printf_i+0x1f4>
 8004b80:	6820      	ldr	r0, [r4, #0]
 8004b82:	6829      	ldr	r1, [r5, #0]
 8004b84:	0606      	lsls	r6, r0, #24
 8004b86:	f101 0304 	add.w	r3, r1, #4
 8004b8a:	d50a      	bpl.n	8004ba2 <_printf_i+0xce>
 8004b8c:	680e      	ldr	r6, [r1, #0]
 8004b8e:	602b      	str	r3, [r5, #0]
 8004b90:	2e00      	cmp	r6, #0
 8004b92:	da03      	bge.n	8004b9c <_printf_i+0xc8>
 8004b94:	232d      	movs	r3, #45	; 0x2d
 8004b96:	4276      	negs	r6, r6
 8004b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b9c:	485e      	ldr	r0, [pc, #376]	; (8004d18 <_printf_i+0x244>)
 8004b9e:	230a      	movs	r3, #10
 8004ba0:	e019      	b.n	8004bd6 <_printf_i+0x102>
 8004ba2:	680e      	ldr	r6, [r1, #0]
 8004ba4:	602b      	str	r3, [r5, #0]
 8004ba6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004baa:	bf18      	it	ne
 8004bac:	b236      	sxthne	r6, r6
 8004bae:	e7ef      	b.n	8004b90 <_printf_i+0xbc>
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	6820      	ldr	r0, [r4, #0]
 8004bb4:	1d19      	adds	r1, r3, #4
 8004bb6:	6029      	str	r1, [r5, #0]
 8004bb8:	0601      	lsls	r1, r0, #24
 8004bba:	d501      	bpl.n	8004bc0 <_printf_i+0xec>
 8004bbc:	681e      	ldr	r6, [r3, #0]
 8004bbe:	e002      	b.n	8004bc6 <_printf_i+0xf2>
 8004bc0:	0646      	lsls	r6, r0, #25
 8004bc2:	d5fb      	bpl.n	8004bbc <_printf_i+0xe8>
 8004bc4:	881e      	ldrh	r6, [r3, #0]
 8004bc6:	4854      	ldr	r0, [pc, #336]	; (8004d18 <_printf_i+0x244>)
 8004bc8:	2f6f      	cmp	r7, #111	; 0x6f
 8004bca:	bf0c      	ite	eq
 8004bcc:	2308      	moveq	r3, #8
 8004bce:	230a      	movne	r3, #10
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bd6:	6865      	ldr	r5, [r4, #4]
 8004bd8:	60a5      	str	r5, [r4, #8]
 8004bda:	2d00      	cmp	r5, #0
 8004bdc:	bfa2      	ittt	ge
 8004bde:	6821      	ldrge	r1, [r4, #0]
 8004be0:	f021 0104 	bicge.w	r1, r1, #4
 8004be4:	6021      	strge	r1, [r4, #0]
 8004be6:	b90e      	cbnz	r6, 8004bec <_printf_i+0x118>
 8004be8:	2d00      	cmp	r5, #0
 8004bea:	d04d      	beq.n	8004c88 <_printf_i+0x1b4>
 8004bec:	4615      	mov	r5, r2
 8004bee:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bf2:	fb03 6711 	mls	r7, r3, r1, r6
 8004bf6:	5dc7      	ldrb	r7, [r0, r7]
 8004bf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bfc:	4637      	mov	r7, r6
 8004bfe:	42bb      	cmp	r3, r7
 8004c00:	460e      	mov	r6, r1
 8004c02:	d9f4      	bls.n	8004bee <_printf_i+0x11a>
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d10b      	bne.n	8004c20 <_printf_i+0x14c>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	07de      	lsls	r6, r3, #31
 8004c0c:	d508      	bpl.n	8004c20 <_printf_i+0x14c>
 8004c0e:	6923      	ldr	r3, [r4, #16]
 8004c10:	6861      	ldr	r1, [r4, #4]
 8004c12:	4299      	cmp	r1, r3
 8004c14:	bfde      	ittt	le
 8004c16:	2330      	movle	r3, #48	; 0x30
 8004c18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c20:	1b52      	subs	r2, r2, r5
 8004c22:	6122      	str	r2, [r4, #16]
 8004c24:	f8cd a000 	str.w	sl, [sp]
 8004c28:	464b      	mov	r3, r9
 8004c2a:	aa03      	add	r2, sp, #12
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	4640      	mov	r0, r8
 8004c30:	f7ff fee2 	bl	80049f8 <_printf_common>
 8004c34:	3001      	adds	r0, #1
 8004c36:	d14c      	bne.n	8004cd2 <_printf_i+0x1fe>
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	b004      	add	sp, #16
 8004c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c42:	4835      	ldr	r0, [pc, #212]	; (8004d18 <_printf_i+0x244>)
 8004c44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c48:	6829      	ldr	r1, [r5, #0]
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c50:	6029      	str	r1, [r5, #0]
 8004c52:	061d      	lsls	r5, r3, #24
 8004c54:	d514      	bpl.n	8004c80 <_printf_i+0x1ac>
 8004c56:	07df      	lsls	r7, r3, #31
 8004c58:	bf44      	itt	mi
 8004c5a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c5e:	6023      	strmi	r3, [r4, #0]
 8004c60:	b91e      	cbnz	r6, 8004c6a <_printf_i+0x196>
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	f023 0320 	bic.w	r3, r3, #32
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	2310      	movs	r3, #16
 8004c6c:	e7b0      	b.n	8004bd0 <_printf_i+0xfc>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	f043 0320 	orr.w	r3, r3, #32
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	2378      	movs	r3, #120	; 0x78
 8004c78:	4828      	ldr	r0, [pc, #160]	; (8004d1c <_printf_i+0x248>)
 8004c7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c7e:	e7e3      	b.n	8004c48 <_printf_i+0x174>
 8004c80:	0659      	lsls	r1, r3, #25
 8004c82:	bf48      	it	mi
 8004c84:	b2b6      	uxthmi	r6, r6
 8004c86:	e7e6      	b.n	8004c56 <_printf_i+0x182>
 8004c88:	4615      	mov	r5, r2
 8004c8a:	e7bb      	b.n	8004c04 <_printf_i+0x130>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	6826      	ldr	r6, [r4, #0]
 8004c90:	6961      	ldr	r1, [r4, #20]
 8004c92:	1d18      	adds	r0, r3, #4
 8004c94:	6028      	str	r0, [r5, #0]
 8004c96:	0635      	lsls	r5, r6, #24
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	d501      	bpl.n	8004ca0 <_printf_i+0x1cc>
 8004c9c:	6019      	str	r1, [r3, #0]
 8004c9e:	e002      	b.n	8004ca6 <_printf_i+0x1d2>
 8004ca0:	0670      	lsls	r0, r6, #25
 8004ca2:	d5fb      	bpl.n	8004c9c <_printf_i+0x1c8>
 8004ca4:	8019      	strh	r1, [r3, #0]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	4615      	mov	r5, r2
 8004cac:	e7ba      	b.n	8004c24 <_printf_i+0x150>
 8004cae:	682b      	ldr	r3, [r5, #0]
 8004cb0:	1d1a      	adds	r2, r3, #4
 8004cb2:	602a      	str	r2, [r5, #0]
 8004cb4:	681d      	ldr	r5, [r3, #0]
 8004cb6:	6862      	ldr	r2, [r4, #4]
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f7fb faa8 	bl	8000210 <memchr>
 8004cc0:	b108      	cbz	r0, 8004cc6 <_printf_i+0x1f2>
 8004cc2:	1b40      	subs	r0, r0, r5
 8004cc4:	6060      	str	r0, [r4, #4]
 8004cc6:	6863      	ldr	r3, [r4, #4]
 8004cc8:	6123      	str	r3, [r4, #16]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd0:	e7a8      	b.n	8004c24 <_printf_i+0x150>
 8004cd2:	6923      	ldr	r3, [r4, #16]
 8004cd4:	462a      	mov	r2, r5
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	4640      	mov	r0, r8
 8004cda:	47d0      	blx	sl
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d0ab      	beq.n	8004c38 <_printf_i+0x164>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	079b      	lsls	r3, r3, #30
 8004ce4:	d413      	bmi.n	8004d0e <_printf_i+0x23a>
 8004ce6:	68e0      	ldr	r0, [r4, #12]
 8004ce8:	9b03      	ldr	r3, [sp, #12]
 8004cea:	4298      	cmp	r0, r3
 8004cec:	bfb8      	it	lt
 8004cee:	4618      	movlt	r0, r3
 8004cf0:	e7a4      	b.n	8004c3c <_printf_i+0x168>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4632      	mov	r2, r6
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	47d0      	blx	sl
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d09b      	beq.n	8004c38 <_printf_i+0x164>
 8004d00:	3501      	adds	r5, #1
 8004d02:	68e3      	ldr	r3, [r4, #12]
 8004d04:	9903      	ldr	r1, [sp, #12]
 8004d06:	1a5b      	subs	r3, r3, r1
 8004d08:	42ab      	cmp	r3, r5
 8004d0a:	dcf2      	bgt.n	8004cf2 <_printf_i+0x21e>
 8004d0c:	e7eb      	b.n	8004ce6 <_printf_i+0x212>
 8004d0e:	2500      	movs	r5, #0
 8004d10:	f104 0619 	add.w	r6, r4, #25
 8004d14:	e7f5      	b.n	8004d02 <_printf_i+0x22e>
 8004d16:	bf00      	nop
 8004d18:	08005059 	.word	0x08005059
 8004d1c:	0800506a 	.word	0x0800506a

08004d20 <__sread>:
 8004d20:	b510      	push	{r4, lr}
 8004d22:	460c      	mov	r4, r1
 8004d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d28:	f000 f894 	bl	8004e54 <_read_r>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	bfab      	itete	ge
 8004d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d32:	89a3      	ldrhlt	r3, [r4, #12]
 8004d34:	181b      	addge	r3, r3, r0
 8004d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d3a:	bfac      	ite	ge
 8004d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d3e:	81a3      	strhlt	r3, [r4, #12]
 8004d40:	bd10      	pop	{r4, pc}

08004d42 <__swrite>:
 8004d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d46:	461f      	mov	r7, r3
 8004d48:	898b      	ldrh	r3, [r1, #12]
 8004d4a:	05db      	lsls	r3, r3, #23
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	4616      	mov	r6, r2
 8004d52:	d505      	bpl.n	8004d60 <__swrite+0x1e>
 8004d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d58:	2302      	movs	r3, #2
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f000 f868 	bl	8004e30 <_lseek_r>
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d6a:	81a3      	strh	r3, [r4, #12]
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	463b      	mov	r3, r7
 8004d70:	4628      	mov	r0, r5
 8004d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d76:	f000 b817 	b.w	8004da8 <_write_r>

08004d7a <__sseek>:
 8004d7a:	b510      	push	{r4, lr}
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d82:	f000 f855 	bl	8004e30 <_lseek_r>
 8004d86:	1c43      	adds	r3, r0, #1
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	bf15      	itete	ne
 8004d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d96:	81a3      	strheq	r3, [r4, #12]
 8004d98:	bf18      	it	ne
 8004d9a:	81a3      	strhne	r3, [r4, #12]
 8004d9c:	bd10      	pop	{r4, pc}

08004d9e <__sclose>:
 8004d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da2:	f000 b813 	b.w	8004dcc <_close_r>
	...

08004da8 <_write_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4d07      	ldr	r5, [pc, #28]	; (8004dc8 <_write_r+0x20>)
 8004dac:	4604      	mov	r4, r0
 8004dae:	4608      	mov	r0, r1
 8004db0:	4611      	mov	r1, r2
 8004db2:	2200      	movs	r2, #0
 8004db4:	602a      	str	r2, [r5, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f7fb ff3f 	bl	8000c3a <_write>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_write_r+0x1e>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_write_r+0x1e>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	2000014c 	.word	0x2000014c

08004dcc <_close_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	4d06      	ldr	r5, [pc, #24]	; (8004de8 <_close_r+0x1c>)
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	602b      	str	r3, [r5, #0]
 8004dd8:	f7fb ff4b 	bl	8000c72 <_close>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d102      	bne.n	8004de6 <_close_r+0x1a>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	b103      	cbz	r3, 8004de6 <_close_r+0x1a>
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	2000014c 	.word	0x2000014c

08004dec <_fstat_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4d07      	ldr	r5, [pc, #28]	; (8004e0c <_fstat_r+0x20>)
 8004df0:	2300      	movs	r3, #0
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	602b      	str	r3, [r5, #0]
 8004dfa:	f7fb ff46 	bl	8000c8a <_fstat>
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	d102      	bne.n	8004e08 <_fstat_r+0x1c>
 8004e02:	682b      	ldr	r3, [r5, #0]
 8004e04:	b103      	cbz	r3, 8004e08 <_fstat_r+0x1c>
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	bd38      	pop	{r3, r4, r5, pc}
 8004e0a:	bf00      	nop
 8004e0c:	2000014c 	.word	0x2000014c

08004e10 <_isatty_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4d06      	ldr	r5, [pc, #24]	; (8004e2c <_isatty_r+0x1c>)
 8004e14:	2300      	movs	r3, #0
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	f7fb ff45 	bl	8000caa <_isatty>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_isatty_r+0x1a>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_isatty_r+0x1a>
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	2000014c 	.word	0x2000014c

08004e30 <_lseek_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4d07      	ldr	r5, [pc, #28]	; (8004e50 <_lseek_r+0x20>)
 8004e34:	4604      	mov	r4, r0
 8004e36:	4608      	mov	r0, r1
 8004e38:	4611      	mov	r1, r2
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	602a      	str	r2, [r5, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f7fb ff3e 	bl	8000cc0 <_lseek>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_lseek_r+0x1e>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_lseek_r+0x1e>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	2000014c 	.word	0x2000014c

08004e54 <_read_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4d07      	ldr	r5, [pc, #28]	; (8004e74 <_read_r+0x20>)
 8004e58:	4604      	mov	r4, r0
 8004e5a:	4608      	mov	r0, r1
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	602a      	str	r2, [r5, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f7fb fecc 	bl	8000c00 <_read>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d102      	bne.n	8004e72 <_read_r+0x1e>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	b103      	cbz	r3, 8004e72 <_read_r+0x1e>
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	2000014c 	.word	0x2000014c

08004e78 <_init>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr

08004e84 <_fini>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr
